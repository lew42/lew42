var test = require("test42");
var View = require("view42/v8");
var util = require("util42");
var is = util.is;

var assert = test.assert;

var Base = require("./Base4");

var assertClassInstance = function(Class, instance){
	assert(instance instanceof Class);
	assert(instance.constructor === Class);
	assert(Object.getPrototypeOf(instance) === Class.prototype);
};

var assertBaseExt = function(Base, Ext){
	assert(Object.getPrototypeOf(Ext.prototype) === Base.prototype);
};


test("new", function(){
	assertClassInstance(Base, new Base());
});

test("without new", function(){
	assertClassInstance(Base, Base());
});

test("extend", function(){
	var Base2 = Base.extend();
	var Base3 = Base2.extend();
	var Base4 = Base3.extend();
	assertBaseExt(Base, Base2);
	assertBaseExt(Base2, Base3);
	assertBaseExt(Base3, Base4);
});

test("console.log appearance", function(){
	console.log(Base());
	console.log(Base.extend({name: "MyClass"})());
});

test("calls instantiate", function(){
	var Base2 = Base.extend(), check;

	Base2.prototype.instantiate = function(){
		check = this;
	};

	base = Base2();

	assert(check === base);
});

test("assign", function(){
	var base = Base({
		log: true,
		prop: 123,
		method: function(){
			this.log("this is inside method");
		}
	});

	assert(base.prop === 123);
	base.method();
});