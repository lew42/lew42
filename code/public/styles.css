/*! normalize.css v5.0.0 | MIT License | github.com/necolas/normalize.css */

/* Document
   ========================================================================== */

/**
 * 1. Change the default font family in all browsers (opinionated).
 * 2. Correct the line height in all browsers.
 * 3. Prevent adjustments of font size after orientation changes in
 *    IE on Windows Phone and in iOS.
 */

html {
  font-family: sans-serif; /* 1 */
  line-height: 1.15; /* 2 */
  -ms-text-size-adjust: 100%; /* 3 */
  -webkit-text-size-adjust: 100%; /* 3 */
}

/* Sections
   ========================================================================== */

/**
 * Remove the margin in all browsers (opinionated).
 */

body {
  margin: 0;
}

/**
 * Add the correct display in IE 9-.
 */

article,
aside,
footer,
header,
nav,
section {
  display: block;
}

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */

h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/* Grouping content
   ========================================================================== */

/**
 * Add the correct display in IE 9-.
 * 1. Add the correct display in IE.
 */

figcaption,
figure,
main { /* 1 */
  display: block;
}

/**
 * Add the correct margin in IE 8.
 */

figure {
  margin: 1em 40px;
}

/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */

hr {
  box-sizing: content-box; /* 1 */
  height: 0; /* 1 */
  overflow: visible; /* 2 */
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */

pre {
  font-family: monospace, monospace; /* 1 */
  font-size: 1em; /* 2 */
}

/* Text-level semantics
   ========================================================================== */

/**
 * 1. Remove the gray background on active links in IE 10.
 * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.
 */

a {
  background-color: transparent; /* 1 */
  -webkit-text-decoration-skip: objects; /* 2 */
}

/**
 * Remove the outline on focused links when they are also active or hovered
 * in all browsers (opinionated).
 */

a:active,
a:hover {
  outline-width: 0;
}

/**
 * 1. Remove the bottom border in Firefox 39-.
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */

abbr[title] {
  border-bottom: none; /* 1 */
  text-decoration: underline; /* 2 */
  text-decoration: underline dotted; /* 2 */
}

/**
 * Prevent the duplicate application of `bolder` by the next rule in Safari 6.
 */

b,
strong {
  font-weight: inherit;
}

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */

b,
strong {
  font-weight: bolder;
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */

code,
kbd,
samp {
  font-family: monospace, monospace; /* 1 */
  font-size: 1em; /* 2 */
}

/**
 * Add the correct font style in Android 4.3-.
 */

dfn {
  font-style: italic;
}

/**
 * Add the correct background and color in IE 9-.
 */

mark {
  background-color: #ff0;
  color: #000;
}

/**
 * Add the correct font size in all browsers.
 */

small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */

sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/* Embedded content
   ========================================================================== */

/**
 * Add the correct display in IE 9-.
 */

audio,
video {
  display: inline-block;
}

/**
 * Add the correct display in iOS 4-7.
 */

audio:not([controls]) {
  display: none;
  height: 0;
}

/**
 * Remove the border on images inside links in IE 10-.
 */

img {
  border-style: none;
}

/**
 * Hide the overflow in IE.
 */

svg:not(:root) {
  overflow: hidden;
}

/* Forms
   ========================================================================== */

/**
 * 1. Change the font styles in all browsers (opinionated).
 * 2. Remove the margin in Firefox and Safari.
 */

button,
input,
optgroup,
select,
textarea {
  font-family: sans-serif; /* 1 */
  font-size: 100%; /* 1 */
  line-height: 1.15; /* 1 */
  margin: 0; /* 2 */
}

/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 */

button,
input { /* 1 */
  overflow: visible;
}

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */

button,
select { /* 1 */
  text-transform: none;
}

/**
 * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`
 *    controls in Android 4.
 * 2. Correct the inability to style clickable types in iOS and Safari.
 */

button,
html [type="button"], /* 1 */
[type="reset"],
[type="submit"] {
  -webkit-appearance: button; /* 2 */
}

/**
 * Remove the inner border and padding in Firefox.
 */

button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0;
}

/**
 * Restore the focus styles unset by the previous rule.
 */

button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText;
}

/**
 * Change the border, margin, and padding in all browsers (opinionated).
 */

fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */

legend {
  box-sizing: border-box; /* 1 */
  color: inherit; /* 2 */
  display: table; /* 1 */
  max-width: 100%; /* 1 */
  padding: 0; /* 3 */
  white-space: normal; /* 1 */
}

/**
 * 1. Add the correct display in IE 9-.
 * 2. Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */

progress {
  display: inline-block; /* 1 */
  vertical-align: baseline; /* 2 */
}

/**
 * Remove the default vertical scrollbar in IE.
 */

textarea {
  overflow: auto;
}

/**
 * 1. Add the correct box sizing in IE 10-.
 * 2. Remove the padding in IE 10-.
 */

[type="checkbox"],
[type="radio"] {
  box-sizing: border-box; /* 1 */
  padding: 0; /* 2 */
}

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */

[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */

[type="search"] {
  -webkit-appearance: textfield; /* 1 */
  outline-offset: -2px; /* 2 */
}

/**
 * Remove the inner padding and cancel buttons in Chrome and Safari on macOS.
 */

[type="search"]::-webkit-search-cancel-button,
[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */

::-webkit-file-upload-button {
  -webkit-appearance: button; /* 1 */
  font: inherit; /* 2 */
}

/* Interactive
   ========================================================================== */

/*
 * Add the correct display in IE 9-.
 * 1. Add the correct display in Edge, IE, and Firefox.
 */

details, /* 1 */
menu {
  display: block;
}

/*
 * Add the correct display in all browsers.
 */

summary {
  display: list-item;
}

/* Scripting
   ========================================================================== */

/**
 * Add the correct display in IE 9-.
 */

canvas {
  display: inline-block;
}

/**
 * Add the correct display in IE.
 */

template {
  display: none;
}

/* Hidden
   ========================================================================== */

/**
 * Add the correct display in IE 10-.
 */

[hidden] {
  display: none;
}/**
 * prism.js tomorrow night eighties for JavaScript, CoffeeScript, CSS and HTML
 * Based on https://github.com/chriskempson/tomorrow-theme
 * @author Rose Pritchard
 */

code[class*="language-"],
pre[class*="language-"] {
	color: #ccc;
	background: none;
	font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace;
	text-align: left;
	white-space: pre;
	word-spacing: normal;
	word-break: normal;
	word-wrap: normal;
	line-height: 1.5;

	-moz-tab-size: 4;
	-o-tab-size: 4;
	tab-size: 4;

	-webkit-hyphens: none;
	-moz-hyphens: none;
	-ms-hyphens: none;
	hyphens: none;

}

/* Code blocks */
pre[class*="language-"] {
	padding: 1em;
	margin: .5em 0;
	overflow: auto;
}

:not(pre) > code[class*="language-"],
pre[class*="language-"] {
	background: #2d2d2d;
}

/* Inline code */
:not(pre) > code[class*="language-"] {
	padding: .1em;
	border-radius: .3em;
	white-space: normal;
}

.token.comment,
.token.block-comment,
.token.prolog,
.token.doctype,
.token.cdata {
	color: #999;
}

.token.punctuation {
	color: #ccc;
}

.token.tag,
.token.attr-name,
.token.namespace,
.token.deleted {
	color: #e2777a;
}

.token.function-name {
	color: #6196cc;
}

.token.boolean,
.token.number,
.token.function {
	color: #f08d49;
}

.token.property,
.token.class-name,
.token.constant,
.token.symbol {
	color: #f8c555;
}

.token.selector,
.token.important,
.token.atrule,
.token.keyword,
.token.builtin {
	color: #cc99cd;
}

.token.string,
.token.char,
.token.attr-value,
.token.regex,
.token.variable {
	color: #7ec699;
}

.token.operator,
.token.entity,
.token.url {
	color: #67cdcc;
}

.token.important,
.token.bold {
	font-weight: bold;
}
.token.italic {
	font-style: italic;
}

.token.entity {
	cursor: help;
}

.token.inserted {
	color: green;
}
/* styles.less */
/* Keep margins @ 1em */
/* SERIF */
body {
  font-family: "Trebuchet MS", Arial, sans-serif;
}
h1,
h2,
h3,
h4,
h5,
h6 {
  font-weight: 900;
}
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote {
  margin: 1rem 0;
}
@media (max-width: 500px) {
  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  p,
  blockquote {
    margin: 1.75rem 0;
  }
}
h1 {
  font-size: 2.25rem;
}
@media (max-width: 1000px) {
  h1 {
    font-size: 2.25em;
  }
}
h2 {
  font-size: 1.8rem;
}
@media (max-width: 1000px) {
  h2 {
    font-size: 1.8em;
  }
}
h3 {
  font-size: 1.5rem;
}
@media (max-width: 1000px) {
  h3 {
    font-size: 1.5em;
  }
}
h4 {
  font-size: 1.375rem;
}
@media (max-width: 1000px) {
  h4 {
    font-size: 1.375em;
  }
}
h5 {
  font-size: 1.25rem;
}
@media (max-width: 1000px) {
  h5 {
    font-size: 1.25em;
  }
}
h6 {
  font-size: 1.15rem;
}
@media (max-width: 1000px) {
  h6 {
    font-size: 1.15em;
  }
}
.ta-c {
  text-align: center;
}
.ff-a {
  font-family: Arial, sans-serif;
}
.ff-ab {
  font-family: "Arial Black", "Arial Bold", Arial, sans-serif;
}
.ff-an {
  font-family: "Arial Narrow", Arial, sans-serif;
}
.ff-tms {
  font-family: "Trebuchet MS", Arial, sans-serif;
}
.ff-t {
  font-family: Tahoma, Verdana, Arial, sans-serif;
}
.ff-v {
  font-family: Verdana, Tahoma, Arial, sans-serif;
}
/* SERIF */
.ff-tnr {
  font-family: TimesNewRoman, "Times New Roman", Georgia, serif;
}
.ff-p {
  font-family: Palatino,Georgia,serif;
}
.ff-g {
  font-family: Georgia,Palatino,serif;
}
.ff-c {
  font-family: "Courier New", Courier, monospace;
}
.fw-b {
  font-weight: bold;
}
/* these probably aren't necessary, but i'll leave them
for convenience */
.tt-u {
  text-transform: uppercase;
}
.fs-0 {
  font-size: 0em;
}
.fs-10 {
  font-size: 0.1em;
}
.fs-20 {
  font-size: 0.2em;
}
.fs-25 {
  font-size: 0.25em;
}
.fs-30 {
  font-size: 0.3em;
}
.fs-40 {
  font-size: 0.4em;
}
.fs-50 {
  font-size: 0.5em;
}
.fs-60 {
  font-size: 0.6em;
}
.fs-70 {
  font-size: 0.7em;
}
.fs-75 {
  font-size: 0.75em;
}
.fs-80 {
  font-size: 0.8em;
}
.fs-90 {
  font-size: 0.9em;
}
.fs-100 {
  font-size: 1em;
}
.fs-110 {
  font-size: 1.1em;
}
.fs-120 {
  font-size: 1.2em;
}
.fs-125 {
  font-size: 1.25em;
}
.fs-130 {
  font-size: 1.3em;
}
.fs-140 {
  font-size: 1.4em;
}
.fs-150 {
  font-size: 1.5em;
}
.fs-160 {
  font-size: 1.6em;
}
.fs-170 {
  font-size: 1.7em;
}
.fs-175 {
  font-size: 1.75em;
}
.fs-180 {
  font-size: 1.8em;
}
.fs-190 {
  font-size: 1.9em;
}
.fs-200 {
  font-size: 2em;
}
.fs-225 {
  font-size: 2.25em;
}
.fs-250 {
  font-size: 2.5em;
}
.fs-275 {
  font-size: 2.75em;
}
.fs-300 {
  font-size: 3em;
}
.fs-350 {
  font-size: 3.5em;
}
.fs-400 {
  font-size: 4em;
}
.fs-450 {
  font-size: 4.5em;
}
.fs-500 {
  font-size: 5em;
}
.fs-550 {
  font-size: 5.5em;
}
.fs-600 {
  font-size: 6em;
}
.shade {
  position: relative;
}
.shade:after {
  content: "";
  display: block;
  box-shadow: inset 1px 1px 1px rgba(255, 255, 255, 0.05), inset -1px -1px 1px rgba(0, 0, 0, 0.1);
  background: linear-gradient(to bottom, rgba(255, 255, 255, 0.05) 0%, rgba(0, 0, 0, 0.1) 100%);
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
}
.bg-fire {
  background-image: radial-gradient(ellipse at top left, #ff9d00 0%, #ff3300 100%);
}
.bg-rotate-1 {
  transform: rotate(-0.15deg) scaleX(1.03) scaleY(1.1);
}
/*

selector {
	> * {
		.sep;
	}
}

This is much better than having .sep added to the parent, and automatically targeting all children.

This way, we can choose which to add it to.

*/
:first-child {
  margin-top: 0;
}
:last-child {
  margin-bottom: 0;
}
.cols {
  display: flex;
  flex-wrap: wrap;
}
.centered-85 {
  width: 85%;
  margin: 0 auto;
}
.v-center {
  display: flex;
  align-items: center;
}
.v-center > * {
  width: 100%;
}
.bar {
  display: flex;
}
.bar > .icon {
  padding: 0.5em;
}
.bar,
.bar > * {
  background-color: rgba(0, 0, 0, 0.05);
}
.bar > * {
  padding: 0.5em;
}
.bar > .icon {
  border-right: 1px solid rgba(0, 0, 0, 0.1);
  border-left: 1px solid rgba(255, 255, 255, 0.1);
}
.bar > .icon:last-child {
  border-right: none;
}
.bar > .icon:first-child {
  border-left: none;
}
.box {
  background: #eee;
  padding: 0 0 0 0.75em;
  font-size: 0.95em;
}
.barBox {
  transition: all 0.3s;
  margin: 0.5em 0;
}
.barBox.collapsed {
  margin: 0;
}
.var .type,
.obj .type,
.arr .type,
.var .class,
.obj .class,
.arr .class {
  color: #666;
}
.var .name,
.obj .name,
.arr .name {
  flex-grow: 1;
}
.arr > .box > .bar > .bar,
.arr > .box > .bar > .barBox {
  flex-grow: 1;
  padding: 0;
}
/* Actual spacing is double these values, since there is padding + margin around the edges, and double margin from 2 neighboring items */
.cols > .third {
  width: 33.3333%;
}
.cols > .thirds {
  width: 66.6666%;
}
.cols.spaced {
  padding: 1% 1.25%;
}
.cols.spaced > * {
  margin: 1% 1.25%;
  width: 47.5%;
}
.cols.spaced.break > * {
  width: auto;
}
.cols.spaced.zg {
  padding: 0;
}
.cols.spaced.zg > * {
  width: 48.75%;
}
.cols.spaced.zg.break > * {
  width: auto;
  margin-left: 0;
  margin-right: 0;
}
.cols.spaced.large {
  padding: 2% 2.5%;
}
.cols.spaced.large > * {
  margin: 2% 2.5%;
  width: 45%;
}
.cols.spaced.large.break > * {
  width: auto;
}
.cols.spaced.large.zg {
  padding: 0;
}
.cols.spaced.large.zg > * {
  width: 47.5%;
}
.cols.spaced.large.zg.break > * {
  width: auto;
  margin-left: 0;
  margin-right: 0;
}
.cols.spaced.zg > *:nth-child(2n+1) {
  margin-left: 0;
}
.cols.spaced.zg > *:nth-child(2n) {
  margin-right: 0;
}
.cols.spaced.zg > *:nth-child(1),
.cols.spaced.zg > *:nth-child(2) {
  margin-top: 0;
}
.cols.spaced.zg > *:nth-last-child(1),
.cols.spaced.zg > *:nth-last-child(2) {
  margin-bottom: 0;
}
.cols.break > *,
.cols.large > * {
  width: auto;
}
.display-flex {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}
.flex-wrap {
  -ms-flex-wrap: wrap;
  -webkit-flex-wrap: wrap;
  flex-wrap: wrap;
}
#app .basis-auto,
#app .c-basis-auto > * {
  -ms-flex-preferred-size: auto;
  flex-basis: auto;
}
#app .basis-xxl,
#app .c-basis-xxl > * {
  -ms-flex-preferred-size: 35em;
  flex-basis: 35em;
}
#app .basis-xl,
#app .c-basis-xl > * {
  -ms-flex-preferred-size: 30em;
  flex-basis: 30em;
}
#app .basis-l,
#app .c-basis-l > * {
  -ms-flex-preferred-size: 25em;
  flex-basis: 25em;
}
#app .basis-m,
#app .c-basis-m > * {
  -ms-flex-preferred-size: 20em;
  flex-basis: 20em;
}
#app .basis-s,
#app .c-basis-s > * {
  -ms-flex-preferred-size: 15em;
  flex-basis: 15em;
}
#app .basis-xs,
#app .c-basis-xs > * {
  -ms-flex-preferred-size: 10em;
  flex-basis: 10em;
}
/*

USE CONSISTENT LAYOUTS - THAT'S THE IMPORTANT THING
It doesn't really matter if you use rems w/ rappers,
or naked percents... As long as its consistent...



CSS switches are better than overrides

.one or .two is better than .one or .one.two

*/
.cols-2,
.grid-2 {
  display: flex;
  flex-wrap: wrap;
}
.cols-2 > *,
.grid-2 > * {
  flex: 1;
}
.cols-2.one > *,
.grid-2.one > * {
  flex-basis: 100%;
}
.cols-2.one.limit:not(.break) > *,
.grid-2.one.limit:not(.break) > * {
  max-width: 100%;
}
.cols-2.two > *,
.grid-2.two > * {
  flex-basis: 50%;
}
.cols-2.two.limit:not(.break) > *,
.grid-2.two.limit:not(.break) > * {
  max-width: 50%;
}
.cols-2.three > *,
.grid-2.three > * {
  flex-basis: 33.33333333%;
}
.cols-2.three.limit:not(.break) > *,
.grid-2.three.limit:not(.break) > * {
  max-width: 33.33333333%;
}
.cols-2.four > *,
.grid-2.four > * {
  flex-basis: 25%;
}
.cols-2.four.limit:not(.break) > *,
.grid-2.four.limit:not(.break) > * {
  max-width: 25%;
}
.cols-2.break {
  display: block;
}
.grid-2.naked {
  /* naked meaning items have no wrappers 
		the only way to do that is with % side margins.
		But, anything else is legit for top/bottom... 
			Top and bottom spacing of em/rem will lead to unequal 
			vertical/horizontal gutters...
			To keep equal gutters, we need to use the same %.. 

		Gutter sizing should be standardized for rhythm.  But, sizes are arbitrary,
		and could be defined per-project. */
}
.grid-2.naked.two {
  /* "space between" - no outside padding */
  /* I suppose .space.pad could be used for the fully spaced and padded.
	That would allow .pad without .space, so you could have % padding on the grid itself, which I suppose could be helpful. 


.pad.space doesn't do anything... .pad overrides .space, and so .pad vs .pad.space has no effect.

Also, having .pad, .space, and .pad.space makes it trickier - I'd have to rewrite the width function to account for padding, but no spacing... 

	*/
}
.grid-2.naked.two.space > * {
  margin: 1% 1%;
  flex-basis: 49%;
  max-width: 49%;
}
.grid-2.naked.two.pad {
  padding: 1% 1%;
}
.grid-2.naked.two.pad > * {
  margin: 1% 1%;
  flex-basis: 48%;
  max-width: 48%;
}
.grid-2.naked.two.break > * {
  /* rather than do a gutter fix for all items in a 1 col grid */
  margin-left: 0;
  margin-right: 0;
}
.grid-2.naked.two > *:nth-child(2n+1) {
  margin-left: 0;
}
.grid-2.naked.two > *:nth-child(2n) {
  margin-right: 0;
}
.grid-2.naked.two > *:nth-child(1) {
  margin-top: 0;
}
.grid-2.naked.two > *:nth-last-child(1) {
  margin-bottom: 0;
}
.grid-2.naked.two:not(.break) > * {
  /* when we .break, these mess up the spacing */
}
.grid-2.naked.two:not(.break) > *:nth-child(1),
.grid-2.naked.two:not(.break) > *:nth-child(2) {
  margin-top: 0;
}
.grid-2.naked.two:not(.break) > *:nth-last-child(1),
.grid-2.naked.two:not(.break) > *:nth-last-child(2) {
  margin-bottom: 0;
}
/* 
This just makes it way harder to work with, or way too much duplicated code.
Either you have to import ALL grid math (one, two, three, four...)
or you can't use those other styles...
*/
.grid-test-1 {
  display: flex;
  flex-wrap: wrap;
}
.grid-test-1 > * {
  flex: 1;
}
.grid-test-1 > * {
  flex-basis: 33.33333333%;
}
.grid-test-1.limit:not(.break) > * {
  max-width: 33.33333333%;
}
/* Actual spacing is double these values, since there is padding + margin around the edges, and double margin from 2 neighboring items */
.grid {
  display: flex;
  flex-wrap: wrap;
}
.grid > *,
.grid > .half {
  width: 50%;
}
.grid.three > *,
.grid > .third {
  width: 33.33333333%;
}
.grid > .thirds {
  width: 66.66666667%;
}
.grid.four > *,
.grid > .fourth,
.grid > .quarter {
  width: 25%;
}
.grid.spaced {
  padding: 1% 1.25%;
}
.grid.spaced > * {
  margin: 1% 1.25%;
  width: 47.5%;
}
.grid.spaced.break > * {
  width: 100%;
}
.grid.spaced.zg {
  padding: 0;
}
.grid.spaced.zg > * {
  width: 48.75%;
}
.grid.spaced.zg.break > * {
  width: 100%;
  margin-left: 0;
  margin-right: 0;
}
.grid.spaced.large {
  padding: 2% 2.5%;
}
.grid.spaced.large > * {
  margin: 2% 2.5%;
  width: 45%;
}
.grid.spaced.large.break > * {
  width: 100%;
}
.grid.spaced.large.zg {
  padding: 0;
}
.grid.spaced.large.zg > * {
  width: 47.5%;
}
.grid.spaced.large.zg.break > * {
  width: 100%;
  margin-left: 0;
  margin-right: 0;
}
.grid.spaced.zg:not(.three):not(.four) > *:nth-child(2n+1) {
  margin-left: 0;
}
.grid.spaced.zg:not(.three):not(.four) > *:nth-child(2n) {
  margin-right: 0;
}
.grid.spaced.zg:not(.three):not(.four) > *:nth-child(1) {
  margin-top: 0;
}
.grid.spaced.zg:not(.three):not(.four) > *:nth-last-child(1) {
  margin-bottom: 0;
}
.grid.spaced.zg:not(.three):not(.four):not(.break) > * {
  /* when we .break, these mess up the spacing */
}
.grid.spaced.zg:not(.three):not(.four):not(.break) > *:nth-child(1),
.grid.spaced.zg:not(.three):not(.four):not(.break) > *:nth-child(2) {
  margin-top: 0;
}
.grid.spaced.zg:not(.three):not(.four):not(.break) > *:nth-last-child(1),
.grid.spaced.zg:not(.three):not(.four):not(.break) > *:nth-last-child(2) {
  margin-bottom: 0;
}
.grid.spaced.three {
  padding: 1% 1.25%;
}
.grid.spaced.three > * {
  margin: 1% 1.25%;
  width: 30.83333333%;
}
.grid.spaced.three.break > * {
  width: 100%;
}
.grid.spaced.three.zg {
  padding: 0;
}
.grid.spaced.three.zg > * {
  width: 31.66666667%;
}
.grid.spaced.three.zg.break > * {
  width: 100%;
  margin-left: 0;
  margin-right: 0;
}
.grid.spaced.three.large {
  padding: 2% 2.5%;
}
.grid.spaced.three.large > * {
  margin: 2% 2.5%;
  width: 28.33333333%;
}
.grid.spaced.three.large.break > * {
  width: 100%;
}
.grid.spaced.three.large.zg {
  padding: 0;
}
.grid.spaced.three.large.zg > * {
  width: 30%;
}
.grid.spaced.three.large.zg.break > * {
  width: 100%;
  margin-left: 0;
  margin-right: 0;
}
.grid.spaced.three.zg > *:nth-child(3n+1) {
  margin-left: 0;
}
.grid.spaced.three.zg > *:nth-child(3n) {
  margin-right: 0;
}
.grid.spaced.three.zg > *:nth-child(1),
.grid.spaced.three.zg > *:nth-child(2),
.grid.spaced.three.zg > *:nth-child(3) {
  margin-top: 0;
}
.grid.spaced.three.zg > *:nth-last-child(1),
.grid.spaced.three.zg > *:nth-last-child(2),
.grid.spaced.three.zg > *:nth-last-child(3) {
  margin-bottom: 0;
}
.grid.spaced.four {
  padding: 1% 1.25%;
}
.grid.spaced.four > * {
  margin: 1% 1.25%;
  width: 22.5%;
}
.grid.spaced.four.break > * {
  width: 100%;
}
.grid.spaced.four.zg {
  padding: 0;
}
.grid.spaced.four.zg > * {
  width: 23.125%;
}
.grid.spaced.four.zg.break > * {
  width: 100%;
  margin-left: 0;
  margin-right: 0;
}
.grid.spaced.four.large {
  padding: 2% 2.5%;
}
.grid.spaced.four.large > * {
  margin: 2% 2.5%;
  width: 20%;
}
.grid.spaced.four.large.break > * {
  width: 100%;
}
.grid.spaced.four.large.zg {
  padding: 0;
}
.grid.spaced.four.large.zg > * {
  width: 21.25%;
}
.grid.spaced.four.large.zg.break > * {
  width: 100%;
  margin-left: 0;
  margin-right: 0;
}
.grid.spaced.four.zg > *:nth-child(4n+1) {
  margin-left: 0;
}
.grid.spaced.four.zg > *:nth-child(4n) {
  margin-right: 0;
}
.grid.spaced.four.zg > *:nth-child(1),
.grid.spaced.four.zg > *:nth-child(2),
.grid.spaced.four.zg > *:nth-child(3),
.grid.spaced.four.zg > *:nth-child(4) {
  margin-top: 0;
}
.grid.spaced.four.zg > *:nth-last-child(1),
.grid.spaced.four.zg > *:nth-last-child(2),
.grid.spaced.four.zg > *:nth-last-child(3),
.grid.spaced.four.zg > *:nth-last-child(4) {
  margin-bottom: 0;
}
.grid.break > * {
  width: 100%;
}
.auto-grid {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  -ms-flex-wrap: wrap;
  -webkit-flex-wrap: wrap;
  flex-wrap: wrap;
}
.auto-grid > * {
  -webkit-box-flex: 1;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  /*
		Three approaches for Safari:
			1) leave as auto
			2) 'default' to 0%
			3) 'default' to 100%

		*/
}
.auto-grid > article {
  margin: 0;
}
.stack-c-1p > * {
  margin-top: 1%;
  margin-bottom: 1%;
}
.stack-c-2p > * {
  margin-top: 2%;
  margin-bottom: 2%;
}
.stack-c-3p > * {
  margin-top: 3%;
  margin-bottom: 3%;
}
.stack-c-4p > * {
  margin-top: 4%;
  margin-bottom: 4%;
}
.stack-c-1rem > * {
  margin-top: 1rem;
  margin-bottom: 1rem;
}
.stack-c-2rem > * {
  margin-top: 2rem;
  margin-bottom: 2rem;
}
.stack-c-3rem > * {
  margin-top: 3rem;
  margin-bottom: 3rem;
}
.stack-c-4rem > * {
  margin-top: 4rem;
  margin-bottom: 4rem;
}
.stack-c-1em > * {
  margin-top: 1em;
  margin-bottom: 1em;
}
.stack-c-2em > * {
  margin-top: 2em;
  margin-bottom: 2em;
}
.stack-c-3em > * {
  margin-top: 3em;
  margin-bottom: 3em;
}
.stack-c-4em > * {
  margin-top: 4em;
  margin-bottom: 4em;
}
.stack-c-0 > * {
  margin-top: 0;
  margin-bottom: 0;
}
.stack-1p {
  margin-top: 1%;
  margin-bottom: 1%;
}
.stack-2p {
  margin-top: 2%;
  margin-bottom: 2%;
}
.stack-3p {
  margin-top: 3%;
  margin-bottom: 3%;
}
.stack-4p {
  margin-top: 4%;
  margin-bottom: 4%;
}
.stack-1rem {
  margin-top: 1rem;
  margin-bottom: 1rem;
}
.stack-2rem {
  margin-top: 2rem;
  margin-bottom: 2rem;
}
.stack-3rem {
  margin-top: 3rem;
  margin-bottom: 3rem;
}
.stack-4rem {
  margin-top: 4rem;
  margin-bottom: 4rem;
}
.stack-1em {
  margin-top: 1em;
  margin-bottom: 1em;
}
.stack-2em {
  margin-top: 2em;
  margin-bottom: 2em;
}
.stack-3em {
  margin-top: 3em;
  margin-bottom: 3em;
}
.stack-4em {
  margin-top: 4em;
  margin-bottom: 4em;
}
.stack-0 {
  margin-top: 0;
  margin-bottom: 0;
}
:first-child {
  margin-top: 0;
}
:last-child {
  margin-bottom: 0;
}
/* unitless */
.has-inner-bg {
  position: relative;
}
.has-inner-bg > .inner-bg {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  z-index: -1;
}
.inner-bg {
  position: relative;
}
.svg-def {
  height: 0;
  width: 0;
  position: absolute;
}
.pad,
.pad-c > * {
  padding: 1em;
}
.pad.full,
.pad-c > *.full {
  margin-left: -1em;
  margin-right: -1em;
}
.pad.full:first-child,
.pad-c > *.full:first-child {
  margin-top: -1em;
}
.pad.full:last-child,
.pad-c > *.full:last-child {
  margin-bottom: -1em;
}
.no-pad {
  padding: 0;
}
.global-squeeze,
.page > section,
.split-wrap {
  position: relative;
  max-width: 1600px;
  margin-left: auto;
  margin-right: auto;
  width: 90%;
}
@media (max-width: 1174px) {
  .global-squeeze,
  .page > section,
  .split-wrap {
    width: 100%;
  }
}
@media (min-width: 1500px) {
  .responsive-global-squeeze .global-squeeze {
    width: 90%;
  }
}
@media (min-width: 1800px) {
  .responsive-global-squeeze .global-squeeze {
    width: 86%;
  }
}
@media (min-width: 2100px) {
  .responsive-global-squeeze .global-squeeze {
    width: 82%;
  }
}
.giga-squeeze,
.llh {
  max-width: 2000px;
  margin-left: auto;
  margin-right: auto;
}
.trans {
  background: rgba(0, 0, 0, 0.1);
}
.pad-m {
  padding: 1em 1.2em;
}
.pad-l {
  padding: 1.5em 1.75em;
}
.pad-p {
  padding: 4% 4.5%;
}
.itm {
  background: rgba(0, 0, 0, 0.1);
  margin: 1em 0;
}
.itm > * {
  margin: 0.9em 0;
}
.itm:first-child,
.itm > :first-child {
  margin-top: 0;
}
.itm:last-child,
.itm > :last-child {
  margin-bottom: 0;
}
.stacked > .itm,
.itm.stacked > * {
  margin-top: 0;
  margin-bottom: 0;
}
.itm > * {
  background: rgba(0, 0, 0, 0.1);
}
.itm h1 {
  font-size: 2em;
  margin: 0.5em 0;
}
.itm h2 {
  font-size: 1.5em;
  margin: 0.75em 0;
}
.ddd {
  background: #ddd;
}
.blue-rad-grad {
  background: radial-gradient(ellipse at center, #ffffff 0%, rgba(255, 255, 255, 0.5) 100%);
  background-color: blue;
}
.full-2 {
  background: rgba(0, 0, 0, 0.1);
  min-height: 5em;
}
/* padding: 1em 1.2em */
.pad-m {
  border: 1px solid black;
}
.pad-m > .full-2 {
  margin-left: -1.2em;
  margin-right: -1.2em;
  border: 1px solid blue;
}
.pad-m > .full-2:first-child {
  margin-top: -1em;
  margin-bottom: 1em;
}
.pad-m > .full-2:last-child {
  margin-bottom: -1em;
  margin-top: 1em;
}
/* padding: 4% 4.5% */
.pad-p {
  background: rgba(0, 0, 0, 0.1);
  padding: 5% 5%;
  margin: 5% 0;
}
.pad-p > * {
  background: rgba(0, 0, 0, 0.1);
}
.pad-p > .full-2 {
  margin: 0 -5.55555556%;
}
.pad-p > .full-2:first-child {
  margin-top: -5.55555556%;
}
.pad-p > .full-2:last-child {
  margin-bottom: -5.55555556%;
}
.pad-p > * {
  margin: 5% 0;
}
.pad-p:first-child,
.pad-p > :first-child {
  margin-top: 0;
}
.pad-p:last-child,
.pad-p > :last-child {
  margin-bottom: 0;
}
.stacked > .pad-p,
.pad-p.stacked > * {
  margin-top: 0;
  margin-bottom: 0;
}
.edged {
  box-shadow: inset 1px 1px 1px rgba(255, 255, 255, 0.25), inset -1px -1px 1px rgba(0, 0, 0, 0.25);
}
.trans2 {
  background: rgba(0, 0, 0, 0.05);
}
.x-all * {
  /*.trans2;*/
}
.x-all :first-child {
  margin-top: 0;
}
.x-all :last-child {
  margin-bottom: 0;
}
.x-all .stacked,
.x-all .stack > * {
  margin-top: 0;
  margin-bottom: 0;
}
.x-all .x-full {
  background: rgba(0, 0, 0, 0.1);
}
.x-all .x-full.mh5 {
  min-height: 5em;
}
.pmix {
  /* @p is numeric, not % units, but will be % units */
  padding: 1% 1.2% 1% 1.2%;
  /**/
  /*
	> * + .x-full {
		margin-top: -1em;
	}*/
}
.pmix > * {
  margin-top: 1%;
  margin-bottom: 0rem;
}
.pmix > .x-full {
  margin-left: -1.2295082%;
  margin-right: -1.2295082%;
  margin-bottom: 1.02459016%;
  /* this is like top padding for the next child */
  margin-top: 1.02459016%;
}
.pmix > .x-full:first-child {
  margin-top: -1.02459016%;
}
.pmix > .x-full:last-child {
  margin-bottom: -1.02459016%;
}
.pmix > .x-full.pad,
.pmix > .x-full.pad-c > * {
  /* top is usually a little smaller than bottom, and while this isn't completely legit, i think it'll work for now */
  padding: 1.02459016% 1.2295082% 1.02459016% 1.2295082%;
}
.pmix > .x-full + * {
  margin-top: 1.02459016%;
}
.pmix > * {
  margin-top: 1%;
  margin-bottom: 0;
  padding-bottom: 0.5em;
  margin-left: 0.5em;
  margin-right: 0.5em;
}
.pmix > *:last-child {
  margin-bottom: 0;
}
.cards {
  background: #ddd;
  padding: 2% 2% 2% 2%;
  /**/
  /*
	> * + .x-full {
		margin-top: -1em;
	}*/
}
.cards > * {
  margin-top: 2%;
  margin-bottom: 0.5rem;
}
.cards > .x-full {
  margin-left: -2.08333333%;
  margin-right: -2.08333333%;
  margin-bottom: 2.08333333%;
  /* this is like top padding for the next child */
  margin-top: 2.08333333%;
}
.cards > .x-full:first-child {
  margin-top: -2.08333333%;
}
.cards > .x-full:last-child {
  margin-bottom: -2.08333333%;
}
.cards > .x-full.pad,
.cards > .x-full.pad-c > * {
  /* top is usually a little smaller than bottom, and while this isn't completely legit, i think it'll work for now */
  padding: 2.08333333% 2.08333333% 2.08333333% 2.08333333%;
}
.cards > .x-full + * {
  margin-top: 2.08333333%;
}
.card {
  margin-top: 1em;
  margin-bottom: 1em;
  /* @p is numeric, not % units, but will be % units */
  padding: 3% 3.6% 3% 3.6%;
  /**/
  /*
	> * + .x-full {
		margin-top: -1em;
	}*/
  background: #fff !important;
  box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.2);
}
.card > * {
  margin-top: 3%;
  margin-bottom: 0.66666667rem;
}
.card > .x-full {
  margin-left: -3.87931034%;
  margin-right: -3.87931034%;
  margin-bottom: 3.23275862%;
  /* this is like top padding for the next child */
  margin-top: 3.23275862%;
}
.card > .x-full:first-child {
  margin-top: -3.23275862%;
}
.card > .x-full:last-child {
  margin-bottom: -3.23275862%;
}
.card > .x-full.pad,
.card > .x-full.pad-c > * {
  /* top is usually a little smaller than bottom, and while this isn't completely legit, i think it'll work for now */
  padding: 3.23275862% 3.87931034% 3.23275862% 3.87931034%;
}
.card > .x-full + * {
  margin-top: 3.23275862%;
}
.card .name {
  float: left;
  padding: 4px 8px;
  margin-right: 8px;
  margin-bottom: 3px;
  margin-left: -20px;
  margin-top: -15px;
  background: #ff6600;
  color: white;
}
.card .content {
  margin-top: 0;
}
.card > .icon {
  background: rgba(0, 0, 0, 0.3);
}
.card > .x-full.flex.pad-c > * {
  border-right: 1px solid rgba(0, 0, 0, 0.1);
}
img {
  display: block;
  max-width: 100%;
}
/* These ingredients should also be overrides (come after the core css) */
.p-1p {
  padding: 1% 1.5% 1% 1.5%;
  /**/
  /*
	> * + .x-full {
		margin-top: -1em;
	}*/
}
.p-1p > * {
  margin-top: 1%;
  margin-bottom: 0rem;
}
.p-1p > .x-full {
  margin-left: -1.54639175%;
  margin-right: -1.54639175%;
  margin-bottom: 1.03092784%;
  /* this is like top padding for the next child */
  margin-top: 1.03092784%;
}
.p-1p > .x-full:first-child {
  margin-top: -1.03092784%;
}
.p-1p > .x-full:last-child {
  margin-bottom: -1.03092784%;
}
.p-1p > .x-full.pad,
.p-1p > .x-full.pad-c > * {
  /* top is usually a little smaller than bottom, and while this isn't completely legit, i think it'll work for now */
  padding: 1.03092784% 1.54639175% 1.03092784% 1.54639175%;
}
.p-1p > .x-full + * {
  margin-top: 1.03092784%;
}
.p-2p {
  /* @p is numeric, not % units, but will be % units */
  padding: 2% 2.4% 2% 2.4%;
  /**/
  /*
	> * + .x-full {
		margin-top: -1em;
	}*/
}
.p-2p > * {
  margin-top: 2%;
  margin-bottom: 0.5rem;
}
.p-2p > .x-full {
  margin-left: -2.5210084%;
  margin-right: -2.5210084%;
  margin-bottom: 2.10084034%;
  /* this is like top padding for the next child */
  margin-top: 2.10084034%;
}
.p-2p > .x-full:first-child {
  margin-top: -2.10084034%;
}
.p-2p > .x-full:last-child {
  margin-bottom: -2.10084034%;
}
.p-2p > .x-full.pad,
.p-2p > .x-full.pad-c > * {
  /* top is usually a little smaller than bottom, and while this isn't completely legit, i think it'll work for now */
  padding: 2.10084034% 2.5210084% 2.10084034% 2.5210084%;
}
.p-2p > .x-full + * {
  margin-top: 2.10084034%;
}
.p-3p {
  /* @p is numeric, not % units, but will be % units */
  padding: 3% 3.6% 3% 3.6%;
  /**/
  /*
	> * + .x-full {
		margin-top: -1em;
	}*/
}
.p-3p > * {
  margin-top: 3%;
  margin-bottom: 0.66666667rem;
}
.p-3p > .x-full {
  margin-left: -3.87931034%;
  margin-right: -3.87931034%;
  margin-bottom: 3.23275862%;
  /* this is like top padding for the next child */
  margin-top: 3.23275862%;
}
.p-3p > .x-full:first-child {
  margin-top: -3.23275862%;
}
.p-3p > .x-full:last-child {
  margin-bottom: -3.23275862%;
}
.p-3p > .x-full.pad,
.p-3p > .x-full.pad-c > * {
  /* top is usually a little smaller than bottom, and while this isn't completely legit, i think it'll work for now */
  padding: 3.23275862% 3.87931034% 3.23275862% 3.87931034%;
}
.p-3p > .x-full + * {
  margin-top: 3.23275862%;
}
.p-4p {
  /* @p is numeric, not % units, but will be % units */
  padding: 4% 4.8% 4% 4.8%;
  /**/
  /*
	> * + .x-full {
		margin-top: -1em;
	}*/
}
.p-4p > * {
  margin-top: 4%;
  margin-bottom: 0.75rem;
}
.p-4p > .x-full {
  margin-left: -5.30973451%;
  margin-right: -5.30973451%;
  margin-bottom: 4.42477876%;
  /* this is like top padding for the next child */
  margin-top: 4.42477876%;
}
.p-4p > .x-full:first-child {
  margin-top: -4.42477876%;
}
.p-4p > .x-full:last-child {
  margin-bottom: -4.42477876%;
}
.p-4p > .x-full.pad,
.p-4p > .x-full.pad-c > * {
  /* top is usually a little smaller than bottom, and while this isn't completely legit, i think it'll work for now */
  padding: 4.42477876% 5.30973451% 4.42477876% 5.30973451%;
}
.p-4p > .x-full + * {
  margin-top: 4.42477876%;
}
.p-5p {
  /* @p is numeric, not % units, but will be % units */
  padding: 5% 6% 5% 6%;
  /**/
  /*
	> * + .x-full {
		margin-top: -1em;
	}*/
}
.p-5p > * {
  margin-top: 5%;
  margin-bottom: 0.8rem;
}
.p-5p > .x-full {
  margin-left: -6.81818182%;
  margin-right: -6.81818182%;
  margin-bottom: 5.68181818%;
  /* this is like top padding for the next child */
  margin-top: 5.68181818%;
}
.p-5p > .x-full:first-child {
  margin-top: -5.68181818%;
}
.p-5p > .x-full:last-child {
  margin-bottom: -5.68181818%;
}
.p-5p > .x-full.pad,
.p-5p > .x-full.pad-c > * {
  /* top is usually a little smaller than bottom, and while this isn't completely legit, i think it'll work for now */
  padding: 5.68181818% 6.81818182% 5.68181818% 6.81818182%;
}
.p-5p > .x-full + * {
  margin-top: 5.68181818%;
}
.p-1em,
.pc-1em > * {
  /* @em is numeric, not em units, but will be em units */
  padding: 1em 1.25em 1.25em 1.25em;
}
.p-1em > .x-full,
.pc-1em > * > .x-full {
  margin-left: -1.25em;
  margin-right: -1.25em;
}
.p-1em > .x-full:first-child,
.pc-1em > * > .x-full:first-child {
  margin-top: -1em;
}
.p-1em > .x-full:last-child,
.pc-1em > * > .x-full:last-child {
  margin-bottom: -1em;
}
.p-2em,
.pc-2em > * {
  /* @em is numeric, not em units, but will be em units */
  padding: 2em 2.5em 2.5em 2.5em;
}
.p-2em > .x-full,
.pc-2em > * > .x-full {
  margin-left: -2.5em;
  margin-right: -2.5em;
}
.p-2em > .x-full:first-child,
.pc-2em > * > .x-full:first-child {
  margin-top: -2em;
}
.p-2em > .x-full:last-child,
.pc-2em > * > .x-full:last-child {
  margin-bottom: -2em;
}
.p-3em,
.pc-3em > * {
  /* @em is numeric, not em units, but will be em units */
  padding: 3em 3.75em 3.75em 3.75em;
}
.p-3em > .x-full,
.pc-3em > * > .x-full {
  margin-left: -3.75em;
  margin-right: -3.75em;
}
.p-3em > .x-full:first-child,
.pc-3em > * > .x-full:first-child {
  margin-top: -3em;
}
.p-3em > .x-full:last-child,
.pc-3em > * > .x-full:last-child {
  margin-bottom: -3em;
}
.p-4em {
  /* @em is numeric, not em units, but will be em units */
  padding: 4em 5em 5em 5em;
}
.p-4em > .x-full {
  margin-left: -5em;
  margin-right: -5em;
}
.p-4em > .x-full:first-child {
  margin-top: -4em;
}
.p-4em > .x-full:last-child {
  margin-bottom: -4em;
}
.p-5em {
  /* @em is numeric, not em units, but will be em units */
  padding: 5em 6.25em 6.25em 6.25em;
}
.p-5em > .x-full {
  margin-left: -6.25em;
  margin-right: -6.25em;
}
.p-5em > .x-full:first-child {
  margin-top: -5em;
}
.p-5em > .x-full:last-child {
  margin-bottom: -5em;
}
/*
Don't apply blanket margin-top/bottom (ems) to items, without accounting for font-size changes.

If we want to adjust spacing, we need to calculate each element's spacing based on its current font-size, which could be tricky...

Or, just use rems, which will stay constant for all items

Or, if using ems (which will be more dynamic, and accept container's font-size adjustments) with a "> *" selector, just make sure to follow a list > item pattern, so all items have the same font-size.
*/
.s-1em,
.sc-1em > * {
  margin-top: 1em;
  margin-bottom: 1em;
}
.s-2em,
.sc-2em > * {
  margin-top: 2em;
  margin-bottom: 2em;
}
.s-3em,
.sc-3em > * {
  margin-top: 2em;
  margin-bottom: 2em;
}
.s-4em,
.sc-4em > * {
  margin-top: 4em;
  margin-bottom: 4em;
}
.s-5em,
.sc-5em > * {
  margin-top: 5em;
  margin-bottom: 5em;
}
.s-1p {
  margin-top: 1%;
  margin-bottom: 1%;
}
.s-2p {
  margin-top: 2%;
  margin-bottom: 2%;
}
.s-3p {
  margin-top: 3%;
  margin-bottom: 3%;
}
.s-4p {
  margin-top: 4%;
  margin-bottom: 4%;
}
.s-5p {
  margin-top: 5%;
  margin-bottom: 5%;
}
.bar {
  display: flex;
}
/* http://stackoverflow.com/questions/17555682/height-100-or-min-height-100-for-html-and-body-elements */
html {
  height: 100%;
}
body {
  min-height: 100%;
}
/* min-height: 100% doesn't work on the #app */
body {
  display: flex;
}
#app {
  flex: 1;
  max-width: 100%;
  /* for some reason flex boxes are allowed to overflow.. */
}
html {
  font-size: 5px;
}
@media (min-width: 309px) {
  html {
    font-size: 1.618034vw;
  }
}
@media (min-width: 1730px) {
  html {
    font-size: 28px;
  }
}
body {
  font-size: 13px;
}
@media (min-width: 803px) {
  body {
    font-size: 1.618034vw;
  }
}
@media (min-width: 1174px) {
  body {
    font-size: 19px;
  }
}
.flex {
  display: flex;
}
.grow {
  flex-grow: 1;
}
.slide-right {
  margin-left: auto;
}
.fa-fw {
  box-sizing: content-box;
}
/* 
https://www.paulirish.com/2012/box-sizing-border-box-ftw/
apply a natural box layout model to all elements, but allowing components to change */
html {
  box-sizing: border-box;
  font-family: Palatino,Georgia,serif;
}
*,
*:before,
*:after {
  box-sizing: inherit;
}
.old {
  /*
	@n: number of columns
	@gx: gutter size (unitless/%) of left/right side of container
	@gy: gutter size (unitless/%) of top/bottom of container
	@sx: spacing (margin, unitless/%) of left/right of each item
	@sy: spacing (margin, unitless/%) of top/bottom of each item
	*/
}
.old .cols {
  display: flex;
}
.old .cols > * {
  width: 50%;
}
.old .cols.break {
  display: block;
}
.old .cols.break > * {
  width: auto;
}
.old .ib-grid {
  text-align: center;
  padding: 1px 0;
}
.old .ib-grid > * {
  display: inline-block;
  vertical-align: top;
}
.old .ib-grid.two > * {
  width: 50%;
}
.old .ib-grid.three > * {
  width: 33.332%;
}
.old .ib-grid.four > * {
  width: 25%;
}
.old .ib-grid.pad > * {
  padding: 0.8em 1.2em;
}
.old .ib-grid.space > * {
  margin: 1.5% 2%;
}
.old .ib-grid.space.two > * {
  width: 46%;
}
.old .ib-grid.space.three > * {
  width: 29.3332%;
}
.old .ib-grid.space.four {
  padding: 1% 2%;
}
.old .ib-grid.space.four > * {
  width: 21%;
}
.old .f-grid {
  overflow: auto;
}
.old .f-grid > * {
  float: left;
}
.old .f-grid.two > * {
  width: 50%;
}
.old .f-grid.three > * {
  width: 33.332%;
}
.old .f-grid.four > * {
  width: 25%;
}
.old .viz {
  background: rgba(255, 0, 0, 0.2);
  padding: 1px;
  margin: -1px;
}
.old .viz > .vizzed {
  background: rgba(128, 0, 128, 0.2);
}
.old .viz > .vizzed > * {
  background: rgba(255, 255, 255, 0.8);
}
.old .grid.two {
  display: flex;
  flex-wrap: wrap;
}
.old .grid.two > * {
  flex: 1;
}
.old .grid.two > * {
  /* this simplifies to 100/n - 2x*/
  flex: 0 1 50%;
  max-width: 50%;
}
.old .grid.two.justified {
  justify-content: space-between;
}
.old .grid.two.justified > * {
  flex: 0 1 48%;
  margin-bottom: 2em;
}
.old .grid.two.spaced {
  padding: 1.5% 1.75%;
}
.old .grid.two.spaced > * {
  margin: 1.5% 1.75%;
  /* this simplifies to 100/n - 2x*/
  flex: 0 1 46.5%;
  max-width: 46.5%;
}
.old .grid.two.spaced.zg {
  padding: 0;
}
.old .grid.two.spaced.zg > * {
  /* this simplifies to 100/n - 2x + 2x/n */
  flex: 0 1 48.25%;
  max-width: 48.25%;
}
.old .grid.two.spaced.zg > *:nth-child(2n+1) {
  margin-left: 0;
}
.old .grid.two.spaced.zg > *:nth-child(2n) {
  margin-right: 0;
}
.old .grid.two.spaced.zg > *:nth-child(1),
.old .grid.two.spaced.zg > *:nth-child(2) {
  margin-top: 0;
}
.old .grid.two.spaced.zg > *:nth-last-child(1),
.old .grid.two.spaced.zg > *:nth-last-child(2) {
  margin-bottom: 0;
}
.old .grid.two > .third {
  flex: 0 1 33.333%;
  max-width: 33.333%;
}
.old .grid.two > .thirds {
  flex: 0 1 66.666%;
  max-width: 66.666%;
}
.old .grid.three {
  display: flex;
  flex-wrap: wrap;
}
.old .grid.three > * {
  flex: 1;
}
.old .grid.three > * {
  flex: 0 1 33.333%;
  max-width: 33.333%;
}
.old .grid.three.justified {
  justify-content: space-between;
}
.old .grid.three.justified > * {
  flex: 0 1 30%;
  margin-bottom: 2em;
}
.old .grid.three.justified > *:last-child {
  margin-right: auto;
}
.old .grid.three.spaced {
  /* I believe these paddings are % of the .grid's parent's content width, so padding is a little bigger than margin.. But I suppose that's acceptable */
  padding: 1.5% 1.75%;
}
.old .grid.three.spaced > * {
  /* I believe these margins are % of the .grid's content area */
  margin: 1.5% 1.75%;
  /* this simplifies to 100/n - 2x*/
  flex: 0 1 29.83333333%;
  max-width: 29.83333333%;
}
.old .grid.three.spaced.zg {
  padding: 0;
}
.old .grid.three.spaced.zg > * {
  /* this simplifies to 100/n - 2x + 2x/n */
  flex: 0 1 31%;
  max-width: 31%;
}
.old .grid.three.spaced.zg > *:nth-child(3n+1) {
  margin-left: 0;
}
.old .grid.three.spaced.zg > *:nth-child(3n) {
  margin-right: 0;
}
.old .grid.three.spaced.zg > *:nth-child(1),
.old .grid.three.spaced.zg > *:nth-child(2),
.old .grid.three.spaced.zg > *:nth-child(3) {
  margin-top: 0;
}
.old .grid.three.spaced.zg > *:nth-last-child(1),
.old .grid.three.spaced.zg > *:nth-last-child(2),
.old .grid.three.spaced.zg > *:nth-last-child(3) {
  margin-bottom: 0;
}
.old .grid.break {
  display: block;
}
.old .box2 {
  border: 1px solid #aaa;
  background: #ddd;
  font-size: 0.75em;
  padding: 1em 1.4em;
}
.old .box2 > p {
  margin-top: 0;
  padding: 0.8em 1.2em;
  background: white;
  border-radius: 4px;
}
.old .app {
  min-height: 100%;
  display: block;
}
.old .app > .left {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  overflow: auto;
  width: 25%;
  background: #555;
}
.old .app > .left > .header {
  background: rgba(0, 0, 0, 0.1);
  color: white;
}
.old .app > .left > .header > * {
  padding: 0.6em 0.8em;
}
.old .app > .left > .header .icon {
  display: none;
  margin-left: auto;
}
.old .app > .left > .nav .icon {
  margin-left: auto;
}
.old .app > .left > .nav,
.old .app > .left > .nav .route {
  background: rgba(0, 0, 0, 0.1);
}
.old .app > .left > .nav > .flex,
.old .app > .left > .nav .route > .flex {
  padding: 0.3em 0.6em;
  background: rgba(0, 0, 0, 0.1);
  color: white;
}
.old .app > .right {
  position: absolute;
  width: 75%;
  right: 0;
  top: 0;
  bottom: 0;
  overflow: auto;
  background: #ccc;
  padding: 1em 1.25em;
}
.old .app > .right > *,
.old .app > .right > * > * {
  margin-top: 0;
}
.old .app.break > .left,
.old .app.break > .right {
  width: 100%;
}
.old .app.break > .left > .nav {
  display: none;
}
.old .app.break > .left > .header .icon {
  display: inline-block;
}
.old .app.break > .right {
  height: 100%;
}
.old .route > .children {
  padding-left: 1em;
}
.old .page > .left {
  padding: 1em;
  width: 100%;
}
.old .page > .right {
  width: 0%;
}
.old .page.one-active > .left,
.old .page.one-active > .right {
  width: 50%;
}
.old .page.two-active > .left {
  width: 33.3333%;
}
.old .page.two-active > .right {
  width: 66.6666%;
}
a,
a:visited {
  color: #ff6b00;
}
a:hover {
  color: #ff3700;
}
#app {
  display: flex;
  flex-direction: column;
  position: relative;
  overflow-x: hidden;
}
body {
  background-color: #131313;
  background-image: url("/img/bg-pixels.png");
}
html {
  overflow-y: scroll;
  /* makes scrollbar permanent */
}
article {
  margin: 1em 0;
}
li {
  margin-bottom: 0.5em;
}
blockquote {
  padding-left: 1em;
  border-left: 0.3em solid #ccc;
  color: #666;
}
main {
  flex: 1;
}
.admin-panel {
  width: 50%;
  background: #fff;
}
.admin-panel.fullscreen {
  width: 100%;
}
#app > header {
  background: #272727;
  background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.1) 0%, rgba(0, 0, 0, 0.1) 100%);
  box-shadow: 0px 0px 1em rgba(0, 0, 0, 0.25);
  position: relative;
  z-index: 100;
  /*
	Even though preprocessors make it easy (convenient?) to nest styles like this, it makes it a pain in the ass to reuse.  If all styles are flattened, so there's no parent / wrapper dependency, it makes it much easier, in some ways.
	*/
}
#app > header .inner {
  display: flex;
}
@media (min-width: 1175px) {
  #app > header .inner {
    border-right: 1px solid rgba(255, 255, 255, 0.05);
  }
}
#app > header .logo-wrap {
  padding: 0.85em 1.2em;
  padding-left: 0em;
  cursor: pointer;
  position: relative;
}
@media (max-width: 1174px) {
  #app > header .logo-wrap {
    padding-left: 1.2em;
  }
}
#app > header .lew42-logo {
  width: 3.5em;
}
#app > header nav {
  margin-left: auto;
  color: #ddd;
  display: flex;
  text-shadow: 1px 1px 1px black;
  cursor: pointer;
  justify-content: center;
  text-align: center;
  border-left: 1px solid rgba(0, 0, 0, 0.5);
}
#app > header nav > * {
  color: #ddd;
  flex: 1;
  text-transform: uppercase;
  border-left: 1px solid rgba(255, 255, 255, 0.05);
  border-right: 1px solid rgba(0, 0, 0, 0.5);
  font-size: 0.9em;
  padding: 1.2em;
}
@media (max-width: 400px) {
  #app > header nav > * {
    padding-left: 1em;
    padding-right: 1em;
  }
}
#app > header nav > *:hover {
  color: #ff6b00;
}
@media (max-width: 400px) {
  #app > header nav > a {
    display: none;
  }
}
@media (max-width: 803px) {
  #app > header nav,
  #app > header .logo-wrap {
    font-size: 1.25em;
  }
}
@media (min-width: 1175px) {
  .page.page {
    margin-top: 2rem;
  }
}
.page.page.flush {
  margin-top: 0;
}
.banner {
  box-shadow: 3px 3px 6px rgba(0, 0, 0, 0.25);
  position: relative;
  z-index: 3;
}
.banner .inner {
  padding: 3em 2.5rem 1em;
}
.banner > .inner-bg {
  transform: perspective(500px) rotateX(-2deg) rotateZ(-0.5deg) scale(1.05);
  margin: -1em 0;
  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.15);
  border-radius: 3px;
}
.page .banner + .paper {
  padding-top: 4em;
}
.lew42-logo {
  max-width: 100%;
  transform: scaleY(0.8);
}
.lew42-logo .l {
  fill: #ff9d00;
}
.lew42-logo .e {
  fill: #ff6b00;
}
.lew42-logo .w {
  fill: #ff3700;
}
.bg-orange {
  background-color: #ff6b00;
}
.bg-yorange {
  background-color: #ff9d00;
}
.bg-rorange {
  background-color: #ff3700;
}
.orange {
  color: #ff6b00;
}
.yorange {
  color: #ff9d00;
}
.rorange {
  color: #ff3700;
}
.paper {
  background: white;
  background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.1) 0%, rgba(0, 0, 0, 0.1) 100%);
  padding: 2em 3rem;
}
.page > .paper {
  padding: 3em 2.5rem;
}
.content-squeeze {
  max-width: 42em;
  margin-left: auto;
  margin-right: auto;
}
footer.main {
  background: #222;
  color: #aaa;
  padding: 2em 3.5rem;
  box-shadow: 0px 0px 1em rgba(0, 0, 0, 0.5);
}
/* TYPOGRAPHY */
.intro {
  font-size: 1.5em;
  color: #999;
}
.thin {
  font-weight: 100;
}
.white {
  color: white;
}
.text-shadow {
  text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.5);
}
.bg-orange + .paper {
  padding-top: 4%;
}
/* SECTIONS */
.llh {
  text-align: center;
  background: #ff6b00;
  position: relative;
  z-index: 5;
  box-shadow: 0px 0.25rem 2rem rgba(0, 0, 0, 0.25);
}
.llh > * {
  padding: 1.5em 3em 1.7em;
  background-image: radial-gradient(ellipse at top left, rgba(255, 255, 255, 0.1) 50%, rgba(0, 0, 0, 0.1) 100%);
  cursor: pointer;
}
.llh > *:hover {
  background-image: radial-gradient(ellipse at top left, rgba(255, 255, 255, 0.2) 50%, rgba(0, 0, 0, 0.2) 100%);
}
.llh > *:nth-child(n) {
  background-color: #ff9d00;
}
.llh > *:nth-child(2n) {
  background-color: #ff6b00;
}
.llh > *:nth-child(3n) {
  background-color: #ff3700;
}
.llh > * > h2 {
  text-transform: uppercase;
  font-size: 2em;
  font-weight: 100;
  color: white;
  text-shadow: 2px 2px 2px rgba(0, 0, 0, 0.25);
}
.margin-fix:first-child {
  margin-top: 0;
}
.margin-fix:last-child {
  margin-bottom: 0;
}
.nuts {
  background-color: #e2e2e2;
}
main > .page > .nuts.paper {
  padding-top: 5em;
}
.nuts .auto-grid {
  margin-top: 2em;
  margin-left: -1rem;
  margin-right: -1rem;
  justify-content: center;
}
.nuts .auto-grid > * {
  -ms-flex-preferred-size: 17em;
  flex-basis: 17em;
  padding: 0 1rem;
  margin-bottom: 2rem;
}
.nuts .auto-grid > * > * {
  position: relative;
  cursor: pointer;
  padding: 1em 1.2em;
  background-color: #fff;
  box-shadow: 1px 1px 2px rgba(0, 0, 0, 0.15);
  background-image: radial-gradient(ellipse at top left, rgba(255, 255, 255, 0.1) 50%, rgba(0, 0, 0, 0.1) 100%);
  margin: 2rem 0;
}
.nuts .auto-grid > * > *:first-child {
  margin-top: 0;
}
.nuts .auto-grid > * > *:last-child {
  margin-bottom: 0;
}
.nuts .auto-grid > * > * h3 {
  font-weight: 100;
  font-size: 1.25em;
}
.nuts .auto-grid > * > *:hover {
  top: -2px;
  left: -2px;
  box-shadow: 6px 6px 12px rgba(0, 0, 0, 0.1);
}
.split-wrap {
  overflow-x: hidden;
  padding-bottom: 5em;
  margin-bottom: -5em;
  position: relative;
  z-index: 4;
}
.split {
  transform: rotate(-1deg) scaleX(1.03) scaleY(1.1);
  position: relative;
  z-index: 4;
}
main .page .split.paper {
  color: white;
  background-color: #333;
  padding: 4em 3rem;
}
.split .auto-grid {
  transform: rotate(1deg) scaleY(0.919191) scaleX(0.971);
  margin: -1rem -1.2rem;
}
.split .auto-grid > * {
  -ms-flex-preferred-size: 15em;
  flex-basis: 15em;
  padding: 1rem 1.2rem;
  color: #ddd;
  margin-bottom: 1em;
}
.split .auto-grid > *:first-child {
  margin-top: 0;
}
.split .auto-grid > *:last-child {
  margin-bottom: 0;
}
.split .auto-grid > * h3 {
  font-weight: 900;
  text-transform: uppercase;
  text-shadow: 2px 2px 2px rgba(0, 0, 0, 0.5);
  font-size: 1.5rem;
  color: white;
}
@media (max-width: 1000px) {
  .split .auto-grid > * h3 {
    font-size: 1.5em;
  }
}
.split-fire.split-fire {
  margin-bottom: 5em;
}
.split-fire .dark-card {
  padding: 2em 3em 2em;
  flex-basis: 25em;
}
.split-fire .right {
  flex-basis: 25em;
  display: flex;
  align-items: center;
  justify-content: center;
  transform: rotate(1deg) scaleX(1.03) scaleY(1.1) translateY(0px) translateX(0em);
  color: white;
  background-image: radial-gradient(ellipse at top left, #ff9d00 0%, #ff3300 100%);
}
.split-fire .right .inner {
  transform: rotate(-1deg) scaleY(0.9091) scaleX(0.9709) translateX(0em);
  padding: 2em 3em;
  max-width: 60em;
}
.split-fire .right h3 {
  font-weight: 100;
  color: white;
  font-size: 2em;
}
.split-fire .right .cta {
  background: #333;
  color: white;
  font-family: Verdana, Tahoma, Arial, sans-serif;
  font-weight: bold;
  display: inline-block;
  padding: 8px 16px;
  font-size: 0.7em;
  border-radius: 4px;
  text-transform: uppercase;
  cursor: pointer;
}
.style-1 h3 {
  font-size: 2em;
  font-weight: 100;
}
.text-shadow {
  text-shadow: 2px 2px 2px rgba(0, 0, 0, 0.25);
}
.sitemap-item {
  margin: 0.5rem;
  padding: 0.5rem 0.6rem;
  background: #ccc;
  cursor: pointer;
}
.modal {
  display: none;
  position: fixed;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  background: rgba(0, 0, 0, 0.9);
  z-index: 99999;
}
.modal > .inner {
  height: 100%;
  display: flex;
  justify-content: flex-end;
  text-align: right;
}
.modal > .inner > nav {
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  font-size: 2.75em;
  padding: 1em;
}
.modal > .inner > nav > * {
  cursor: pointer;
  color: #ddd;
  text-transform: uppercase;
  font-weight: 900;
  border-top: 1px solid rgba(255, 255, 255, 0.1);
  border-bottom: 1px solid rgba(0, 0, 0, 0.1);
  padding: 1rem 0;
}
.modal > .inner > nav > *:first-child {
  border-top: none;
}
.modal > .inner > nav > *:last-child {
  border-bottom: none;
}
.modal > .inner > nav > *:hover {
  color: white;
}
.loggerView {
  font-family: monospace;
  background: #eee;
  margin-bottom: 0.5em;
}
.loggerView .loggerView {
  margin-bottom: 0.25em;
}
.loggerView .header {
  display: flex;
  background: #ddd;
  margin-bottom: 0.25em;
}
.loggerView .header .label {
  flex-grow: 1;
}
.loggerView .header,
.loggerView .header > * {
  background-color: rgba(0, 0, 0, 0.05);
}
.loggerView .header > * {
  border-right: 1px solid rgba(0, 0, 0, 0.1);
  border-left: 1px solid rgba(255, 255, 255, 0.1);
  padding: 0.25em 0.5em;
}
.loggerView .header > *:last-child {
  border-right: none;
}
.loggerView .header > *:first-child {
  border-left: none;
}
.loggerView .body {
  padding: 0em 0em 0em 1em;
}
.loggerView.falsey > .header .icon {
  color: red;
}
.mod5View {
  font-size: 0.8em;
}
.mod5View > .bar > .class {
  flex: 1;
  border-right: 1px solid rgba(0, 0, 0, 0.1);
  padding-left: 0;
  font-style: italic;
  color: #777;
}
.mod5View > .bar > .id {
  border-right: 1px solid rgba(0, 0, 0, 0.1);
  border-left: 1px solid rgba(255, 255, 255, 0.1);
}
.mod5View > .bar > .id:last-child {
  border-right: none;
}
.mod5View > .bar > .id:first-child {
  border-left: none;
}
.propView > .name {
  flex: 1;
}
:first-child {
  margin-top: 0;
}
:last-child {
  margin-bottom: 0;
}
p {
  line-height: 1.35em;
}
.global-router > .preview > .item {
  background: #ccc;
  margin-bottom: 0;
}
.global-router > .preview > .item > .icon {
  background: #bbb;
}
.global-router > .contents {
  background: #ddd;
  padding: 5px 5px 15px 5px;
  display: flex;
  flex-wrap: wrap;
}
.global-router > .contents > .route > .header > .item {
  font-size: 1em;
}
.route .label {
  flex-grow: 1;
}
.fix-child-margins > :last-child {
  margin-bottom: 0;
}
.fix-child-margins > :first-child {
  margin-top: 0;
}
.padded {
  padding: 0.8em 1.2em;
}
.padded > :last-child {
  margin-bottom: 0;
}
.padded > :first-child {
  margin-top: 0;
}
.test .body > :last-child {
  margin-bottom: 0;
}
.test .body > :first-child {
  margin-top: 0;
}
.test .body > p:first-of-type {
  margin-top: 0;
}
.test-color {
  background: #ff6600;
}
.test-color.d5 {
  background: #000000;
}
.test-color.d4 {
  background: #331400;
}
.test-color.d3 {
  background: #662900;
}
.test-color.d2 {
  background: #993d00;
}
.test-color.d1 {
  background: #cc5200;
}
.test-color.l1 {
  background: #ff8533;
}
.test-color.l2 {
  background: #ffa366;
}
.test-color.l3 {
  background: #ffc299;
}
.test-color.l4 {
  background: #ffe0cc;
}
.test-color.l5 {
  background: #ffffff;
}
.primary-bg {
  background: #ff6600;
}
.primary-bg.d5 {
  background: #000000;
}
.primary-bg.d4 {
  background: #331400;
}
.primary-bg.d3 {
  background: #662900;
}
.primary-bg.d2 {
  background: #993d00;
}
.primary-bg.d1 {
  background: #cc5200;
}
.primary-bg.l1 {
  background: #ff8533;
}
.primary-bg.l2 {
  background: #ffa366;
}
.primary-bg.l3 {
  background: #ffc299;
}
.primary-bg.l4 {
  background: #ffe0cc;
}
.primary-bg.l5 {
  background: #ffffff;
}
.primary-color {
  color: #ff6600;
}
.primary-color.d5 {
  color: #000000;
}
.primary-color.d4 {
  color: #331400;
}
.primary-color.d3 {
  color: #662900;
}
.primary-color.d2 {
  color: #993d00;
}
.primary-color.d1 {
  color: #cc5200;
}
.primary-color.l1 {
  color: #ff8533;
}
.primary-color.l2 {
  color: #ffa366;
}
.primary-color.l3 {
  color: #ffc299;
}
.primary-color.l4 {
  color: #ffe0cc;
}
.primary-color.l5 {
  color: #ffffff;
}
.primary-bg {
  color: white;
  text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.5);
}
.primary-bg.dark {
  color: #444;
  text-shadow: 1px 1px 1px black;
}
h1.primary-bg {
  padding: 0.35em .7em;
}
.primary-color {
  background: #555;
  text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.5);
  padding: 0.35em .7em;
}
h2.primary-color {
  margin: 0.5em 0em;
}
.wires * {
  border: 1px solid black;
  padding: 1px;
}
.stack > *:not(:last-child) {
  margin-bottom: 0;
}
.stack > *:not(:first-child) {
  margin-top: 0;
}
.well {
  background: #ddd;
}
.nav-item,
.test-item {
  background: #333;
  color: white;
  padding: 1em;
  margin: 1em;
}
.test .page {
  background: #eee;
}
.mod5View {
  font-size: 0.8em;
}
.mod5View > .bar > .class {
  flex: 1;
  border-right: 1px solid rgba(0, 0, 0, 0.1);
  padding-left: 0;
  font-style: italic;
  color: #777;
}
.mod5View > .bar > .id {
  border-right: 1px solid rgba(0, 0, 0, 0.1);
  border-left: 1px solid rgba(255, 255, 255, 0.1);
}
.mod5View > .bar > .id:last-child {
  border-right: none;
}
.mod5View > .bar > .id:first-child {
  border-left: none;
}
.propView > .name {
  flex: 1;
}
.flex {
  display: flex;
}
.expandable > .preview {
  cursor: pointer;
}
.value-item {
  display: flex;
}
.value-item .value {
  margin-left: auto;
}
.icon-item {
  display: flex;
}
.icon-item .icon {
  display: block;
}
.icon-item.expandable {
  display: block;
}
.icon-item.expandable .preview {
  display: flex;
}
.wrapper {
  padding: 0;
}
.wrapper > * {
  padding: 1em;
}
.value.num-content {
  font-weight: bold;
  color: blue;
}
.value.str-content {
  color: red;
}
.value.bool-content {
  font-weight: bold;
  color: purple;
}
.item.wires {
  margin-bottom: 1em;
}
.item.wires,
.item.wires * {
  border: 1px solid black;
}
.item.wires > .value {
  margin-left: auto;
}
.expandable.item {
  display: block;
}
.expandable.item > .preview {
  padding: 0;
  display: flex;
}
.expandable.item > .preview > * {
  padding: 1em;
}
.expandable.item > .preview > .value {
  margin-left: auto;
}
.expandable.item > .content .item {
  margin-bottom: 5px;
}
.pad-self,
.pad-children > * {
  padding: 1em;
}
.item {
  font-family: verdana;
  font-size: 13px;
  margin-bottom: 5px;
  background: #fafafa;
}
.item > .icon {
  padding-top: 7px;
  padding-bottom: 5px;
  background: #f0f0f0;
}
.item > .value {
  background: #f0f0f0;
}
.item > .value.number {
  color: green;
}
.item > .value.string {
  color: blue;
}
.item > .value.boolean {
  color: red;
}
.item > .label {
  flex-grow: 1;
}
.item.fn-item > .fn-arg {
  font-style: italic;
  color: #666;
}
.item.pad-self,
.item.pad-children > * {
  padding: 6px 10px;
}
.test .btn {
  cursor: pointer;
}
.test .nested {
  margin-bottom: 0.5em;
}
.test .label {
  flex-grow: 1;
}
.test > .header > .item {
  margin-bottom: 0;
}
.test .body {
  background: #eee;
}
.test .body .nested {
  background: #fff;
}
.test.disabled {
  background: white;
  color: #aaa;
}
.test.failed {
  background: rgba(100, 0, 0, 0.25);
}
.test .item {
  background: none;
}
.test .item .icon {
  background: rgba(0, 0, 0, 0.1);
}
.test .item .label {
  background: rgba(0, 0, 0, 0.05);
}
.test.passed {
  background: #e8f7e8;
}
.test:before {
  content: "";
  display: block;
  box-shadow: inset 1px 1px 1px rgba(255, 255, 255, 0.75), inset -1px -1px 1px rgba(0, 0, 0, 0.25);
  background: linear-gradient(to bottom, rgba(255, 255, 255, 0.1) 0%, rgba(0, 0, 0, 0.03) 100%);
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
}
.test {
  position: relative;
  margin-bottom: 5px;
}
/* bg stacking */
.block {
  background: red;
}
.block:before {
  content: "";
  display: block;
}
@media (max-width: 1174px) {
}
.app2,
.background-page {
  min-height: 100%;
}
.background-page {
  padding-top: 1px;
}
.background-page .pad-c > * {
  padding: 1em 1.25em 1.5em;
}
.background-page {
  position: relative;
}
.background-page > .inner {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  z-index: -5000;
}
.s-one > * {
  background-color: #ff9d00;
  background-image: radial-gradient(ellipse at top left, rgba(255, 255, 255, 0.1) 50%, rgba(0, 0, 0, 0.1) 100%);
  color: #fff;
  padding: 1em 1.5em 1.5em;
}
.s-one > *:nth-child(2n) {
  background-color: #ff6b00;
}
.s-one > *:nth-child(3n) {
  background-color: #ff3700;
}
.s-one > * h1 {
  font-weight: 100;
  font-family: "Open Sans";
  text-shadow: 2px 2px 2px rgba(0, 0, 0, 0.25);
}
.s-two {
  padding: 5% 10%;
  background: #555;
  box-shadow: inset 15px 10px 25px rgba(0, 0, 0, 0.25);
  color: #f2f2f2;
  overflow: auto;
}
.s-two > * h3 {
  font-weight: 100;
  font-family: "Open Sans";
  text-shadow: 2px 2px 2px rgba(0, 0, 0, 0.25);
  text-transform: uppercase;
  margin: 1rem 0;
  font-size: 1.5em;
}
.s-two > .grid {
  margin-top: 1em;
  margin-bottom: 1em;
}
.s-two > .grid > * {
  position: relative;
  z-index: 1;
}
.centered {
  margin-left: auto;
  margin-right: auto;
  width: 85%;
}
.p-centered {
  padding-left: 10%;
  padding-right: 10%;
}
.s-three {
  padding: 5% 20%;
  background: #fff;
}
.dark-card {
  padding: 1em 1.5em 1.5em;
  background: #333;
  /* Use .first and .second, rather than .orange and .white.  Perfect example is here, when I've used those classes a dozen times (very not-DRY code), and don't want to go and replace them all.  So, I ended up making the .white class actually orange, and vice versa.

	Even better - don't use .first and .second, but use .first-of-type, and .nth-of-type.  That way, you can just slap some headers in there, and they'll automatically appear correctly.

	The .orange and .white should be overrides for COLOR only, not font-sizing, weight, or anything else... 

	And still, if you can use CSS to override with an nth-of-type selector, that would be better than adding a CSS class, so you don't have to manage styling in two places. */
}
.dark-card h3 {
  text-transform: uppercase;
  font-size: 2.25em;
  margin: 0;
}
.dark-card h3.white {
  color: #ff5400;
  font-weight: 100;
  font-size: 1.5em;
}
.dark-card h3.orange {
  color: white;
  margin-top: 0.2em;
}
.dark-card .btn {
  margin-top: 1em;
  padding: 0.4em 0.6em;
  background: #ff5800;
  color: white;
  display: inline-block;
}
.s-four {
  background-image: radial-gradient(ellipse at top left, #ff9d00 0%, #ff3300 100%);
}
.tar {
  text-align: right;
}
.s-five {
  margin-bottom: 5em;
}
.s-five .dark-card {
  padding: 2em 3em 2em;
}
.s-five .right {
  display: flex;
  align-items: center;
  justify-content: center;
  transform: rotate(1deg) scaleX(1.03) scaleY(1.1) translateY(0px) translateX(0em);
  color: white;
  background-image: radial-gradient(ellipse at top left, #ff9d00 0%, #ff3300 100%);
}
.s-five .right .inner {
  transform: rotate(-1deg) scaleY(0.9091) scaleX(0.9709) translateX(0em);
  padding: 2em 3em;
  max-width: 60em;
}
.s-five .right h3 {
  font-weight: 100;
  font-family: "Open Sans";
  text-shadow: 2px 2px 2px rgba(0, 0, 0, 0.25);
  font-size: 2em;
}
.s-five .right .cta {
  background: #333;
  color: white;
  font-family: Verdana, Tahoma, Arial, sans-serif;
  font-weight: bold;
  display: inline-block;
  padding: 8px 16px;
  font-size: 0.7em;
  border-radius: 4px;
  text-transform: uppercase;
}
.dummy-spacer {
  min-height: 100em;
}
.test-center-grid > * {
  padding: 2em !important;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
}
.test-center-grid h1 {
  margin: 0;
}
.test-center-grid .yo {
  align-self: flex-end;
}
.controls {
  display: flex;
}
.controls > * {
  padding: 0.25em 0.5em;
  margin-right: 0.5em;
  background: #eee;
}
.s-six {
  background: #ddd;
  margin-bottom: 3em;
}
.s-six .grid > * {
  background: #fff;
  padding: 2em 2.5em;
  background-image: radial-gradient(ellipse at top left, rgba(255, 255, 255, 0.1) 50%, rgba(0, 0, 0, 0.1) 100%);
  box-shadow: 1px 1px 1px 1px rgba(0, 0, 0, 0.1);
}
.s-six .grid > *:nth-child(3n) {
  background-image: radial-gradient(ellipse at top left, #ff9d00 0%, #ff3300 100%);
}
.s-six .grid > *:nth-child(3n+1) {
  background-color: #555;
}
.flex.break {
  display: block;
}
.s-seven {
  margin-bottom: 5em;
}
.s-seven .dark-card {
  padding: 2em 3em 2em;
}
.s-seven .right {
  display: flex;
  align-items: center;
  justify-content: center;
  transform: rotate(1deg) scaleX(1.03) scaleY(1.1) translateY(0px) translateX(0em);
  color: white;
  background-image: radial-gradient(ellipse at top left, #ff9d00 0%, #ff3300 100%);
}
.s-seven .right .inner {
  transform: rotate(-1deg) scaleY(0.9091) scaleX(0.9709) translateX(0em);
  padding: 2em 3em;
  max-width: 60em;
}
.s-seven .right h3 {
  font-weight: 100;
  font-family: "Open Sans";
  text-shadow: 2px 2px 2px rgba(0, 0, 0, 0.25);
  font-size: 2em;
}
.s-seven .right .cta {
  background: #333;
  color: white;
  font-family: Verdana, Tahoma, Arial, sans-serif;
  font-weight: bold;
  display: inline-block;
  padding: 8px 16px;
  font-size: 0.7em;
  border-radius: 4px;
  text-transform: uppercase;
}
.s-seven .dark-card {
  flex-grow: 1;
}
.s-eight {
  margin-bottom: 5em;
}
.s-eight .dark-card {
  padding: 2em 3em 2em;
}
.s-eight .right {
  display: flex;
  align-items: center;
  justify-content: center;
  transform: rotate(1deg) scaleX(1.03) scaleY(1.1) translateY(0px) translateX(0em);
  color: white;
  background-image: radial-gradient(ellipse at top left, #ff9d00 0%, #ff3300 100%);
}
.s-eight .right .inner {
  transform: rotate(-1deg) scaleY(0.9091) scaleX(0.9709) translateX(0em);
  padding: 2em 3em;
  max-width: 60em;
}
.s-eight .right h3 {
  font-weight: 100;
  font-family: "Open Sans";
  text-shadow: 2px 2px 2px rgba(0, 0, 0, 0.25);
  font-size: 2em;
}
.s-eight .right .cta {
  background: #333;
  color: white;
  font-family: Verdana, Tahoma, Arial, sans-serif;
  font-weight: bold;
  display: inline-block;
  padding: 8px 16px;
  font-size: 0.7em;
  border-radius: 4px;
  text-transform: uppercase;
}
.s-eight .right {
  min-width: 24em;
}
.s-eight .second-dark-card {
  text-align: right;
}
.s-nine {
  margin: 4% 0;
}
.s-nine > .inner {
  padding: 2% 3%;
  max-width: 80em;
  background: #fff;
  min-height: 10em;
  margin: 0 auto;
}
.s-ten {
  margin: 4% 2%;
  background: #fff;
  max-width: 80em;
  min-height: 10em;
  padding: 2% 3%;
}
.jumbo-squeeze {
  max-width: 80em;
  margin: 4% auto;
}
.jumbo-squeeze2 {
  max-width: 60em;
  margin: 4% auto;
}
.jumbo-squeeze3 {
  max-width: 50em;
  margin: 4% auto;
}
.s-11 {
  padding: 1px 0;
}
.s-11 > * {
  padding: 1.5em 2em 2em;
  background: #fff;
  box-shadow: 5px 5px 15px rgba(0, 0, 0, 0.25);
}
.s-11 .grid-dark > * {
  border-left: 30px solid #1b1231;
  box-shadow: 1px 1px 0px #333, 
						2px 2px 0px #555, 
						3px 3px 0px #777, 
						4px 4px 0px #999,
						5px 5px 0px #bbb,
						6px 6px 0px #ddd;
  padding: 1em 1.5em 1.5em;
  background: #2a1f46;
  background-image: radial-gradient(ellipse at top left, rgba(255, 255, 255, 0.1) 50%, rgba(0, 0, 0, 0.1) 100%);
  color: white;
}
.s-11 .grid-dark > * h1 {
  color: #d0bcff;
  font-weight: 100;
  font-size: 1.5em;
  text-transform: uppercase;
}
.s-12 {
  text-align: center;
}
.s-12 .grid {
  text-align: left;
}
.s-12 .inner {
  padding: 3% 3.5%;
}
.wrap-11 {
  padding: 1px 0;
  background: #443665;
  background-image: radial-gradient(ellipse at top left, rgba(255, 255, 255, 0.2) 50%, rgba(0, 0, 0, 0.2) 100%);
}
.wrap-13 .s-13 {
  margin-top: 5em;
}
.golden-padding {
  padding: 1.07868933rem 1.7798374rem 1.7798374rem;
}
.radial {
  background-image: radial-gradient(ellipse at top left, rgba(255, 255, 255, 0.2) 50%, rgba(0, 0, 0, 0.2) 100%);
}
.wrap {
  margin-top: 0;
  margin-bottom: 0;
}
.squeeze-c > * {
  margin-left: auto;
  margin-right: auto;
  max-width: 80em;
}
.squeeze-c.large > * {
  max-width: 100em;
}
.squeeze-test-1 {
  margin-left: auto;
  margin-right: auto;
  max-width: 80em;
}
.squeeze-test-2 {
  margin-left: auto;
  margin-right: auto;
  max-width: 80em;
  width: 94%;
}
.contain {
  padding-top: 1px;
  padding-bottom: 1px;
}
.squeeze-test-3-wrap {
  background-color: teal;
  background-image: radial-gradient(ellipse at top left, rgba(255, 255, 255, 0.2) 50%, rgba(0, 0, 0, 0.2) 100%);
  padding: 2rem;
  /* Using a mix of padding allows us to keep % widths on the sides, which is nearly identical to rems, except it gets too big at really large widths.  BUT, when we do a squeeze, we limit the max-width, so it doesn't matter if it has gargantuan side padding (unless you want to do a right/left align :( */
}
.squeeze-test-3 {
  margin-left: auto;
  margin-right: auto;
  max-width: 80em;
}
.grid-with-items > * {
  display: flex;
}
.grid-with-items > *:nth-child(3n+1) > * {
  margin-left: 0;
}
.grid-with-items > *:nth-child(3n) > * {
  margin-right: 0;
}
.grid-with-items > *:nth-child(1) > *,
.grid-with-items > *:nth-child(2) > *,
.grid-with-items > *:nth-child(3) > * {
  margin-top: 0;
}
.grid-with-items > *:nth-last-child(1),
.grid-with-items > *:nth-last-child(2),
.grid-with-items > *:nth-last-child(3) {
  display: block;
}
.grid-with-items > *:nth-last-child(1) > *,
.grid-with-items > *:nth-last-child(2) > *,
.grid-with-items > *:nth-last-child(3) > * {
  margin-bottom: 0;
}
.grid-with-items > * > * {
  flex: 1;
  padding: 1rem;
  margin: 1rem;
  background: #fff;
}
.grid-with-items-2 > * {
  display: flex;
  padding: 1em;
}
.grid-with-items-2 > *:nth-child(3n+1) {
  padding-left: 0;
}
.grid-with-items-2 > *:nth-child(3n) {
  padding-right: 0;
}
.grid-with-items-2 > *:nth-child(1),
.grid-with-items-2 > *:nth-child(2),
.grid-with-items-2 > *:nth-child(3) {
  padding-top: 0;
}
.grid-with-items-2 > *:nth-last-child(1),
.grid-with-items-2 > *:nth-last-child(2),
.grid-with-items-2 > *:nth-last-child(3) {
  padding-bottom: 0;
}
.grid-with-items-2 > *:nth-last-child(3):nth-child(3n-1) {
  padding-bottom: 1em;
}
.grid-with-items-2 > *:nth-last-child(2):nth-child(3n) {
  padding-bottom: 1em;
}
.grid-with-items-2 > *:nth-last-child(3):nth-child(3n) {
  padding-bottom: 1em;
}
.grid-with-items-2 > * > * {
  flex: 1;
  padding: 1rem;
  background: #fff;
}
.s-14 {
  padding: 2rem;
}
.s-15 {
  background: #333;
}
.s-15 .logo-wrap {
  max-width: 30em;
  position: relative;
  padding: 1.5rem 3rem 3rem;
}
.s-15 .logo-wrap .inner-bg {
  background: #191919;
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  transform: perspective(600px) rotateX(-20deg);
  border-bottom: 8rem solid #0e0e0e;
  box-shadow: 0px 2rem 5rem;
}
.s-15 .logo {
  position: relative;
  z-index: 1;
  display: block;
}
.s-15 .logo .l {
  fill: #ff9d00;
}
.s-15 .logo .e {
  fill: #ff6b00;
}
.s-15 .logo .w {
  fill: #ff3700;
}
.s-15.flip .logo-wrap {
  transform: perspective(600px) rotateX(-15deg);
}
.s-15.flip .logo {
  transform: perspective(600px) rotateX(15deg);
}
@media (max-width: 1174px) {
}
.grid-page .grid-2 > *,
.grid-page .cols-2 > * {
  border: 1px solid gray;
  min-height: 1em;
  min-width: 15em;
}
.grid-page .grid-page .grid-2 > *:before,
.grid-page .grid-page .cols-2 > *:before {
  content: "";
  display: block;
  width: 15em;
  height: 6px;
  margin-left: -1.2rem;
  background: blue;
  position: absolute;
  top: 6px;
}
.grid-page .grid-2 > *.min-10,
.grid-page .cols-2 > *.min-10 {
  min-width: 10em;
}
.grid-page .grid-page .grid-2 > *.min-10:before,
.grid-page .grid-page .cols-2 > *.min-10:before {
  content: "";
  display: block;
  width: 10em;
  height: 6px;
  margin-left: -1.2rem;
  background: blue;
  position: absolute;
  top: 6px;
}
.grid-page .grid-2 > *.min-20,
.grid-page .cols-2 > *.min-20 {
  min-width: 20em;
}
.grid-page .grid-page .grid-2 > *.min-20:before,
.grid-page .grid-page .cols-2 > *.min-20:before {
  content: "";
  display: block;
  width: 20em;
  height: 6px;
  margin-left: -1.2rem;
  background: blue;
  position: absolute;
  top: 6px;
}
.grid-page .switches {
  display: flex;
  font-size: 0.9em;
}
.grid-page .switches .switch {
  background: #eee;
  padding: 2px 6px;
  margin-right: 4px;
  cursor: pointer;
}
.grid-page .switches .switch.active {
  background: #aaa;
  color: white;
}
.min-10 {
  min-width: 10em;
}
.grid-page .min-10:before {
  content: "";
  display: block;
  width: 10em;
  height: 6px;
  margin-left: -1.2rem;
  background: blue;
  position: absolute;
  top: 6px;
}
.min-15 {
  min-width: 15em;
}
.grid-page .min-15:before {
  content: "";
  display: block;
  width: 15em;
  height: 6px;
  margin-left: -1.2rem;
  background: blue;
  position: absolute;
  top: 6px;
}
.min-20 {
  min-width: 20em;
}
.grid-page .min-20:before {
  content: "";
  display: block;
  width: 20em;
  height: 6px;
  margin-left: -1.2rem;
  background: blue;
  position: absolute;
  top: 6px;
}
.min-30 {
  min-width: 30em;
}
.grid-page .min-30:before {
  content: "";
  display: block;
  width: 30em;
  height: 6px;
  margin-left: -1.2rem;
  background: blue;
  position: absolute;
  top: 6px;
}
.minc-20 > * {
  min-width: 20em;
}
.grid-page .minc-20 > *:before {
  content: "";
  display: block;
  width: 20em;
  height: 6px;
  margin-left: -1.2rem;
  background: blue;
  position: absolute;
  top: 6px;
}
.minc-30 > * {
  min-width: 30em;
}
.grid-page .minc-30 > *:before {
  content: "";
  display: block;
  width: 30em;
  height: 6px;
  margin-left: -1.2rem;
  background: blue;
  position: absolute;
  top: 6px;
}
.minc-10 > * {
  min-width: 10em;
}
.grid-page .minc-10 > *:before {
  content: "";
  display: block;
  width: 10em;
  height: 6px;
  margin-left: -1.2rem;
  background: blue;
  position: absolute;
  top: 6px;
}
.minc-15 > * {
  min-width: 15em;
}
.grid-page .minc-15 > *:before {
  content: "";
  display: block;
  width: 15em;
  height: 6px;
  margin-left: -1.2rem;
  background: blue;
  position: absolute;
  top: 6px;
}
.maxc-45 > *:not(.grid) {
  max-width: 45em;
}
.grid-3 {
  position: relative;
  display: flex;
  flex-wrap: wrap;
}
.grid-3 .paper {
  position: relative;
  padding: 1rem 1.2rem;
  background-color: rgba(0, 0, 0, 0.1);
  background-image: radial-gradient(ellipse at top left, rgba(255, 255, 255, 0.2) 50%, rgba(0, 0, 0, 0.2) 100%);
}
.grid-3 > * {
  flex: 1;
}
.grid-3.gutters {
  margin: -1rem -1.2rem;
}
.grid-3.gutters > * {
  margin: 1rem 1.2rem;
}
.grid-3.gutters > *.gutters {
  margin: 0;
}
.grid-3 .switches {
  left: 0;
  position: absolute;
  z-index: 5000;
  flex-wrap: wrap;
  top: -100px;
}
.grid-3 .switches:before {
  display: none;
}
.grid-3 .grid-3 .switches {
  top: -50px;
}
.shaded-bg {
  background: rgba(0, 0, 0, 0.1);
}
.jc-center {
  justify-content: center;
}
.ai-start {
  align-items: flex-start;
}
.ac-start {
  align-content: flex-start;
}
.flex-2 {
  flex: 2;
}
.flex-3 {
  flex: 3;
}
.basis2 > * {
  flex-basis: 50%;
}
.basis2.gutters > * {
  flex-basis: 33.33333333%;
}
.basis3 > * {
  flex-basis: 33.33333333%;
}
.basis3.gutters > * {
  flex-basis: 25%;
}
.basis4 > * {
  flex-basis: 25%;
}
.basis4.gutters > * {
  flex-basis: 20%;
}
.basis5 > * {
  flex-basis: 20%;
}
.global-squeeze-42 {
  max-width: 2000px;
  margin-left: auto;
  margin-right: auto;
  width: 90%;
}
@media (max-width: 1174px) {
}
.style-1 {
  background-image: radial-gradient(ellipse at top left, rgba(255, 255, 255, 0.05) 50%, rgba(0, 0, 0, 0.05) 100%);
}
.layout-test-page {
  background: #efefef;
  padding: 1em 0;
}
.layout-test-page .layoutTest {
  background: white;
  margin: 1em;
}
.layout-test-page .layoutTest .grid > * {
  background-color: rgba(0, 0, 0, 0.2);
  box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.1), inset 1px 1px 1px rgba(255, 255, 255, 0.25), inset -1px -1px 1px rgba(0, 0, 0, 0.25);
  background-image: radial-gradient(ellipse at top left, rgba(255, 255, 255, 0.05) 50%, rgba(0, 0, 0, 0.05) 100%);
}
.layout-test-page .controls {
  display: flex;
}
.layout-test-page .controls > * {
  padding: 0.25em 0.5em;
  margin-right: 0.5em;
  background: #eee;
}
.layout-test-page .viz * {
  background: rgba(0, 0, 0, 0.1);
  box-shadow: inset 1px 1px 1px rgba(255, 255, 255, 0.25), inset -1px -1px 1px rgba(0, 0, 0, 0.25);
}
@media (max-width: 1174px) {
}
.viz,
.layouts3-page .grid-13 > *,
.layouts3-page .grids-14 .auto-grid > *:not(.auto-grid) {
  background: rgba(255, 255, 255, 0.1);
  box-shadow: inset 0px 0px 0px 1px rgba(255, 255, 255, 0.5);
}
.oh {
  overflow: hidden;
}
.layouts3-page {
  padding: 3rem 0;
  color: white;
}
.layouts3-page .padded {
  padding: 1rem;
}
.layouts3-page .pad-c > * {
  padding: 1rem 1.2rem;
  position: relative;
}
.layouts3-page .max-10 {
  max-width: 10em;
}
.layouts3-page .max-15 {
  max-width: 15em;
}
.layouts3-page .min-5 {
  min-width: 5em;
}
.layouts3-page .min-max-1 {
  min-width: 8em;
}
@media (min-width: 20em) {
  .layouts3-page .min-max-1 {
    max-width: 16em;
  }
}
.layouts3-page .grid-13 {
  margin-left: -1.2rem;
  margin-right: -1.2rem;
}
.layouts3-page .grid-13:first-child,
.layouts3-page .grid-13.stack-0 {
  margin-top: -1rem;
}
.layouts3-page .grid-13:last-child,
.layouts3-page .grid-13.stack-0 {
  margin-bottom: -1rem;
}
.layouts3-page .grid-13 > * {
  margin: 1rem 1.2rem;
  padding: 1rem 1.2rem;
}
.layouts3-page .grids-14 .auto-grid {
  /* remove the > selector to target nested grids */
}
.layouts3-page .grids-14 .auto-grid > *:not(.auto-grid) {
  min-width: 25em;
  padding: 1rem 1.2rem;
}
.layouts3-page .grids-14 .auto-grid > *:not(.auto-grid).no-pad {
  padding: 0;
}
.layouts3-page .grids-14 .auto-grid > *:not(.auto-grid).no-pad > * {
  padding: 1rem 1.2rem;
}
.layouts3-page .section-1 {
  color: #4d4d6f;
  background-color: lavender;
  background-image: radial-gradient(ellipse at top left, rgba(255, 255, 255, 0.2) 50%, rgba(0, 0, 0, 0.2) 100%);
}
.layouts3-page .section-1 .auto-grid > * {
  padding: 1rem 1.2rem;
  background-image: radial-gradient(ellipse at top left, rgba(255, 255, 255, 0.2) 50%, rgba(0, 0, 0, 0.2) 100%);
}
.layouts3-page .section-2 {
  background-color: white;
  color: #333;
  padding: 1rem 1.2rem;
}
.layouts3-page .section-2 .auto-grid {
  margin-left: -0.6rem;
  margin-right: -0.6rem;
}
.layouts3-page .section-2 .auto-grid:first-child,
.layouts3-page .section-2 .auto-grid.stack-0 {
  margin-top: -0.5rem;
}
.layouts3-page .section-2 .auto-grid:last-child,
.layouts3-page .section-2 .auto-grid.stack-0 {
  margin-bottom: -0.5rem;
}
.layouts3-page .section-2 .auto-grid > * {
  padding: 1rem 1.2rem;
  background: #333;
  color: white;
  margin: 0.5rem 0.6rem;
  background-image: radial-gradient(ellipse at top left, rgba(255, 255, 255, 0.25) 50%, rgba(0, 0, 0, 0.25) 100%);
}
.layouts3-page .section-2.dark {
  padding: 3rem;
  background-color: #333;
  color: white;
}
.layouts3-page .section-2.dark .auto-grid > * {
  background-color: #ccc;
  color: #333;
}
.path > .bar > .icon.fa-bolt {
  margin-left: auto;
}
.flex-value {
  display: flex;
}
.flex-value .left {
  padding: 2px 4px;
  background: #eee;
}
.flex-value .right {
  padding: 2px 4px;
  background: #fff;
}
.isActiveRoute {
  border: 1px solid orange;
}
.route3-page {
  padding: 1em;
  margin-bottom: 1em;
  background: #fff;
  cursor: pointer;
}
.route3-page .active {
  border: 1px solid green;
}
.route3-page.dark {
  background: #eee;
}
.route3-page h3 {
  margin: 0;
}
.route3-page > .children {
  margin-top: 1em;
}
.route3-page > .children :last-child {
  margin-bottom: 0;
}
.well {
  padding: 2em;
  background: #ddd;
}
.item .label {
  padding: 5px 10px;
}
.item .preview {
  display: flex;
}
.item .children {
  padding-left: 10px;
}
.item .activator {
  cursor: pointer;
}
.old .style-1,
.layouts .style-1 {
  background: #ff6600;
}
.old .style-1 > *,
.layouts .style-1 > * {
  min-height: 12em;
}
.old .style-1 .thirds,
.layouts .style-1 .thirds {
  background: rgba(0, 0, 0, 0.2);
}
.old .style-2,
.layouts .style-2 {
  background: #00ff66;
}
.old .style-2 > *,
.layouts .style-2 > * {
  min-height: 12em;
}
.old .style-2 .third,
.layouts .style-2 .third {
  background: rgba(0, 0, 0, 0.2);
}
.old .blue-bg,
.layouts .blue-bg {
  background: #3b3bd8;
}
.old .bgBox,
.layouts .bgBox {
  position: relative;
  top: 0;
  left: 0;
  transition: all 0.2s;
  background: rgba(255, 255, 255, 0.15);
  border-radius: 4px;
  box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.15);
  overflow: hidden;
  /* All these elements should be defined elsewhere, and just imported for this box design.

	All the font styles (text-transform, font-size, font-weight, color, and text-align) should be bundled into a single font-style mixin, for easy reuse?

	Not necessarily - what ever is easiest for reuse...

	Consistency is important - to reuse the same styles a lot.


	*/
}
.old .bgBox .banner,
.layouts .bgBox .banner {
  height: 7em;
  background-color: rgba(255, 255, 255, 0.8);
  background-image: url("https://www.transparenttextures.com/patterns/always-grey.png");
  /* This is mostly intended for prototyping; please download the pattern and re-host for production environments. Thank you! */
}
.old .bgBox p,
.layouts .bgBox p {
  padding: 0 20px;
  font-size: 0.8em;
  line-height: 2em;
}
.old .bgBox h3,
.layouts .bgBox h3 {
  padding: 0 20px;
  color: rgba(255, 255, 255, 0.8);
  text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.2);
  font-size: 1.4em;
  margin-bottom: 0.8em;
}
.old .bgBox .btn,
.layouts .bgBox .btn {
  background: rgba(0, 0, 0, 0.6);
  text-transform: uppercase;
  margin-left: auto;
  font-size: 0.6em;
  font-weight: bold;
  margin-right: 20px;
  display: inline-block;
  padding: 5px 10px;
  color: rgba(255, 255, 255, 0.6);
  text-align: right;
}
.old .bgBox:hover,
.layouts .bgBox:hover {
  background: rgba(255, 255, 255, 0.25);
  cursor: pointer;
  box-shadow: 3px 3px 3px rgba(0, 0, 0, 0.1);
  top: -2px;
  left: -2px;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/