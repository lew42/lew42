log.group("Set2.tests.js", function(){


var test = require("test42");
var view = require("view42");
var assert = test.assert;
var util = require("util42");
var is = util.is;

var Set = require("./Set2");
var Mod = require("mod42/v2");

test("its just like assign", function(){
	var obj = {
		set: Set({ log: true }).fn
	};

	obj.set({
		prop: 1,
		method: function(){}
	});

	assert(obj.prop === 1);
	assert(is.fn(obj.method));

	obj.set({
		prop: 2,
		method: function(value){
			this.check = value;
		}
	});
	
	assert(obj.prop === 2);

	test("but does some cool stuff", function(){
		assert(is.undef(obj.check));

		obj.set({
			method: 123
		});

		assert(obj.check === 123);

		// This will only work if obj has .assign... duh
		// obj.set({
		// 	assign: {
		// 		method: 123
		// 	}
		// });

		// assert(obj.method === 123);
	});
});


var shortFormTest = function(subject){
	var check = {};
	
	subject.set({
		set: function(value){
			check.itWasCalled = true;
			assert(this === subject);
			assert(value === "yo");
		}
	});

	subject.set("yo");

	assert(check.itWasCalled === true);
};

test("short form for set.value", function(){
	// this should be moved into another version
	var obj = {
		set: Set().fn
	};
	
	shortFormTest(obj);
});

test("short form for mod.set.value", function(){
	var mod = Mod();
	shortFormTest(mod);
	assert(mod.set !== Mod.prototype.set);
	assert(mod.set.mfn !== Mod.prototype.set.mfn);
});

});
