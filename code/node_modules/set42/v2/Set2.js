var Mfn = require("mfn42/v4");
var is = require("util42").is;

var Set = module.exports = Mfn.extend({
	name: "Set2",
	// api: function(){
	// 	this.wrapper.sub = this.sub;
	// 	this.wrapper.assignProp = this.assignProp;
	// 	this.wrapper.assignTo = this.assignTo;
	// },
	exec: function(mod){
		for (var i = 1; i < arguments.length; i++)
			this.arg(mod, arguments[i]); // keep mod as first arg
		
		return mod; // important
	},
	arg: function(mod, arg){
		if (is.pojo(arg))
			this.obj(mod, arg);
		else
			this.value.call(mod, arg, this);
	},
	obj: function(mod, obj){
		for (var i in obj){
			this.prop(mod, i, obj[i]);
		}
		return mod; // used in .objProp()
	},
	prop: function(mod, prop, value){
		var currentValue = mod[prop],
			hasOwn = mod.hasOwnProperty(prop);
				// this order is important, because we touch the value before checking hasOwn, it triggers auto cloning

		if (is.fn(mod["set_" + prop])) {
			mod["set_" + prop](value);
			
		} else if (is.simple(currentValue)){
			this.assignProp(mod, prop, value);

		} else if (currentValue.set){
			currentValue.set.mfn.sub(currentValue, value, mod, prop);

		} else if (is.fn(currentValue)) {
			this.fnProp(mod, prop, value);

		} else if (is.obj(currentValue)){
			console.error("Use Object.create() to mimic 'immutability'.  Then we can check if mod._log !== mod._log..");
			// could a very basic .set implementation just use Object.create?
			// base.set(value || pojo)

		} else if (is.arr(currentValue)){
			console.error("Not yet implemented.");
			// I'll need this for the subView: View() vs subView: [View()]??
			// That would hit set.sub anyway...

		} else {
			console.info("what are you?");
			this.assignProp(mod, prop, value);
		}
	},
	// use .assignTo, if present (default is undefined, only define it if ou want to)
	assignProp: function(mod, prop, value){
		if (value && value.set && value.set.mfn && value.set.mfn.assignTo){
			value.set.mfn.assignTo(value, mod, prop);
		} else {
			mod[prop] = value;
		}
	},
	fnProp: function(mod, prop, value){
		if (is.fn(value)) // override
			this.assignProp(mod, prop, value);
		else if (is.arr(value)) // apply array of args
			mod[prop].apply(mod, value);
		else // call with non array arg
			mod[prop].call(mod, value);
	},
	value: function(value){
		// !ctx here is the mod, not the mfn
		console.warn("not sure how to set this");
	},
	// parent[name] === sub (the current value)
	sub: function(sub, value, parent, name){
		// should override?
		if (value instanceof sub.constructor){
			// override
			parent.set.mfn.assignProp(parent, name, value);

		// should protect?
		} else if (!parent.hasOwnProperty(name) && sub.clone){
			if (sub.parent !== parent.proto)
				console.warn("Consider only auto cloning direct children?"); 
				// avoid unwanted/unnecessary auto-cloning of references...?

			// protect via clone()
			parent.set.mfn.assignProp(parent, name, sub.clone(value));

		// otherwise, just use the standard set
		} else {
			this.arg(sub, value);
		}
	},
	mockSetSub: function(wrapper, newValue, parent, propName){
		if (is.fn(newValue)){
			wrapper.mfn.value = newValue;
		} else {
			Mfn.prototype.mockSetSub.apply(this, arguments);
		}
	}
});

// upon instantiation, .config_log allows us to do: new Mfn({ log: {...} })
// however, because prototypes are instantiated, we have to set_log manually
Set.prototype.set_log({
	exec: {
		return: false
	},
	arg: {
		expand: true
	}
});