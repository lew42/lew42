var test = require("test42");
var view = require("view42");
var assert = test.assert;
var util = require("util42");
var is = util.is;

var Prop10 = require("./Prop10");
var Mod1 = require("mod42/Mod1");

var Mod = Mod1.extend({
	name: "Mod",
	Prop: Prop10,
	inst: function(){
		this.props = {};
	},
	prop: function(name){
		var name, ret;
		for (var i = 0; i < arguments.length; i++){
			name = arguments[i];
			ret = this.props[name];
			if (!ret){
				ret = this.props[name] = new this.Prop({
					name: name,
					parent: this,
					value: this[name]
				});
			}
		}
		return ret;
	}
})
test("basic", function(){
	var mod = Mod({
		test: 123
	});

	assert(mod.test === 123);

	var prop = mod.prop("test");

	assert(mod.test === 123);
	assert(prop.value === 123);
	assert(prop instanceof Prop10);
	assert(mod.prop("test") === prop);
	assert(prop.changed !== Prop10.prototype.changed);

	mod.prop("test").changed.append(function(value){
		this.test2 = value;
		this.test3 = this.test;
	});

	mod.prop("another").changed.append(function(value){
		this.another2 = value;
		this.another3 = this.another;
	});

	mod.test = 456;
	mod.another = 8910;

	assert(mod.test2 === 456);
	assert(mod.test3 === 456);

	assert(mod.another2 === 8910);
	assert(mod.another3 === 8910);
});

test("extend", function(){
	// can we have prototype .props?
	var Mod2 = Mod.extend({
		inst: function(){
			this.inst_cloneProps();
		},
		inst_cloneProps: function(){
			var props = {};
			for (var i in this.props){
				props[i] = this.props[i].clone({
					name: i,
					parent: this,
					value: this[i]
				});
			}
			this.props = props;
		}
	}).set({
		extend: {
			instantiatePrototype: function(Ext, Base){
				if (Ext.prototype.inst)
					Ext.prototype.inst();
			}
		}
	}); 

	var Mod3 = Mod2.extend({
		prop: ["four", "five", "test"],
		props: {
			four: {
				changed: {
					append: [function(){
						// console.log("yerp");
						// this works, but prototype props lose their cbs when cloned, so this is pointless
					}]
				}
			}
		},
		test: 123,
		four: 444,
	});

	var mod = Mod3();
	assert(mod.four === 444);
	mod.four = 555;
	assert(mod.four === 555);
	mod.props.four.changed.append(function(){
		this.yo = "yo";
	});


	mod.four = 777;
	assert(mod.yo === "yo");

	var mod2 = Mod3();
	assert(mod2.four === 444);
	assert(mod.props.four !== mod2.props.four);

	// it would be nice if you could 

	var Mod4 = Mod2.extend({
		set: {
			prop: function(mod, propName, value){
				if (value instanceof Prop10){
					value.parent = mod;
					value.name = propName;
					if (!is.def(value.value))
						value.value = mod[propName];
					value.init();
				} else {
					Mod2.prototype.set.mfn.prop.apply(this, arguments);
				}
			}
		}
	});

	var modX = new Mod4({
		something: Prop10("whatever"),
		obj: Prop10(), // pojo won't get .set properly...
		init: function(){
			this.props.obj.changed.append(function(){
				this.yo = "yo";
			});

			this.obj = {};
		}
	})

	console.log(modX);
	assert(modX.props.obj instanceof Prop1);

	assert(modX.yo === "yo");
});