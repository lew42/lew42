/*
If I use a Mfn pattern..

A doubleton approach could be used:  2 global loggers:  1 active, 1 inactive, as it is now.

Or, the .log property could be "defined", and depending on configuration, either the console.logger system could be returned, or the view logger system, or a noop.

And, in that way, additional functionality could be added to the logger system.

And, you could make the .log sfn auto-clone itself (as it does with the log42/v1), and put all that labeling, tracking, etc, at that level.
*/

var Base = require("base42");

var ConsoleLogger = module.exports = Base.extend({
	name: "ConsoleLogger1",
	methods: ["log", "group", "debug", "trace", "error", "warn", "info"],
	initialize: function(){
		this.init_logger();
		this.init();
	},
	init_logger: function(){}
});

var EnabledConsoleLogger = ConsoleLogger.extend({
	name: "EnabledConsoleLogger1",
	init_logger: function(){
		this.logger = console.log.bind(console);
	}
});

var EnabledConsoleLogger = ConsoleLogger.extend({
	name: "EnabledConsoleLogger1",
	init_logger: function(){
		this.logger = console.log.bind(console);
	}
});