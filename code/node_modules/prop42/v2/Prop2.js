var Mod = require("mod42/v4");

/*
I think using .props and doing a batched clone is necessary in order to have arrays of props...

Unless I use some kind of CollItem objects, which could dynamically access a property of the parent.

Mmmm, that would be handy.  But, do I need .props eventually?  We'll see...

So, the .content[] array of the View needs to support these CollItems.  How would that work?  Basically, you'd need an 'each' function that can detect if its a CollItem, and if so, access its value, however its setup to do that.

In order to have

view.two = "2";

Ugh... Substrings... Symstrings

How do you setup a view.prop as a string, and also append it?

view.content[ PropRef("one"), PropRef("two"), PropRef("three") ]
and
view.one = "one";
view.two = "two";
view.three = "three";
and
rendered ==> <div>onetwothree</div>
and
view.two = "2"; ==> <div>one2three</div>


View({
	targets: {
		appendTo, prependTo, insertAfter, ...
		==> handle: "$el"
		
		append, prepend, insert...
		==> container: "$el",

		addClass, removeClass, toggleClass
		==> classes: "$el"

		show, hide, fadeIn, slideToggle, etc
		==> animate: "$el"

		click, hover, drag, etc
		==> behavior, boundary, etc
	}
});

*/

var Prop = module.exports = Mod.extend({
	name: "Prop2",
	adopt: true,
	setter: function(value, ctx){
		this.protect(ctx);
		this.set_value(value, ctx);
	},
	getter: function(ctx){
		this.protect(ctx);
		return this.value;
	},
	set_value: function(value, ctx){
		if (this.value !== value){
			this.value = value;
			this.changed.exec(value, ctx);
		}
	}
});