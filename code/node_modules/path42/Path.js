var Mod = require("mod42/Mod1");
var Q = require("q42");

var PathView = require("./PathView");

var Path = module.exports = Mod.extend({
	name: "Path",
	paths: [],
	View: PathView,
	inst: function(){
		this.paths = [];
	},
	init: function(){
		this.isActiveQ = new Q();
		this.isActiveNodeQ = new Q();
		this.isActiveParentQ = new Q();
		this.activeChildQ = new Q();
	},
	render: function(){
		this.view = new this.View({
			parent: this
		})
	},
	activate: function(){
		this.root.set_activeNode(this);
	},
	isActive: function(){
		return this.isActiveNode() || this.isActiveAncestor();
	},
	isActiveAncestor: function(){
		return this.root.activeNode.isDescendantOf(this);
	},
	isDescendantOf: function(route){
		var parent = this.parent;
		while (parent){
			if (parent === route)
				return true;
			parent = parent.parent;
		}
		return false;
	},
	isActiveNode: function(){
		return this.root.activeNode === this;
	},
	isActiveParent: function(){
		var activeChild = this.activeChild();
		return activeChild && activeChild.isActiveNode();
	},
	add: function(name){
		var item = new this.Path({
			name: name,
			parent: this,
			root: this.root
		});

		this.paths.push(item);
		return item;
	},
	activeChild: function(){
		var current = this.root.activeNode;
		while (current){
			if (current.parent === this)
				return current;
			current = current.parent;
		}
		return false;
	},
	each: function(fn){
		for (var i = 0; i < this.paths.length; i++){
			fn.call(this, this.paths[i]);
		}
	},
	logAll: function(){
		console.group(this.name, this.id);
		console.log("isActiveNode", this.isActiveNode());
		console.log("isActive", this.isActive());
		console.log("isActiveAncestor", this.isActiveAncestor());
		console.log("isActiveParent", this.isActiveParent());
		console.log("activeChild", this.activeChild())
		console.groupEnd();
	},
	exec: function(){
		// this.logAll();
		this.isActiveQ.exec(this.isActive());
		this.isActiveNodeQ.exec(this.isActiveNode());
		this.isActiveParentQ.exec(this.isActiveParent());
		this.activeChildQ.exec(this.activeChild());

		this.each(function(path){
			path.exec();
		});
	},
	make: function(size, depth){
		if (typeof depth === "undefined")
			depth = 1;

		if (depth !== 0){
			for (var i = 1; i <= size; i++){
				this.add("sub"+i).make(size, depth-1);
			}
		}
	}
});

Path.prototype.Path = Path;

var Root = Path.Root = Path.extend({
	name: "RootPath",
	init: function(){
		Path.prototype.init.call(this);
		this.root = this;
		this.activeNode = this;
	},
	set_activeNode: function(node){
		this.activeNode = node;
		this.exec();
	}
});