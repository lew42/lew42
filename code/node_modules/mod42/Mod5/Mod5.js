var Mod1 = require("../Mod1");
var Prop10 = require("prop42/Prop10");
var is = require("util42").is;
var Q = require("q42");

var Mod5View = require("./Mod5View");

var CreatedQ = Q.extend({
	name: "created"
	// init: function(){
	// 	this.add(function(mod){
	// 		if (mod.View){
	// 			new mod.View({
	// 				parent: mod
	// 			})
	// 		}
	// 	})
	// }
});

var Mod5 = module.exports = Mod1.extend({
	name: "Mod5",
	Prop: Prop10,
	View: Mod5View,
	set: {
		stdProp: function(mod, prop, value){
			mod[prop] = value;

			if (value && is.fn(value.adopt) && prop !== "parent")
				value.adopt(mod, prop);
		},
		prop: function(mod, prop, value){
			if (value instanceof mod.Prop){
				value.parent = mod;
				value.name = prop;
				if (!is.def(value.value))
					value.value = mod[prop];
				value.initialize();
			} else {
				Mod1.prototype.set.mfn.prop.apply(this, arguments);
			}
		}
	},
	instantiate: function(){
		this.inst_created.apply(this, arguments);
		this.inst_cloneProps.apply(this, arguments);
		return Mod1.prototype.instantiate.apply(this, arguments);
	},
	inst_created: function(){
		this.constructor.created.exec.call(this.constructor.created, this, arguments);
	},
	inst_cloneProps: function(){
		var protoProps = this.props;
		this.props = {};
		
		// prop.clone will add the reference to parent.props, which means we need to protect this.props BEFORE cloning

		for (var i in protoProps){
			this.props[i] = protoProps[i].clone({
				parent: this
			});
		}
	},
	initialize: function(){
		this.debug();
		this.init();
	},
	debug: function(){
		new this.View({
			mod: this
		});
	},
	prop: function(name){
		var name, ret;
		for (var i = 0; i < arguments.length; i++){
			name = arguments[i];
			ret = this.props[name];
			if (!ret){
				ret = this.props[name] = new this.Prop({
					name: name,
					parent: this,
					value: this[name]
				});
			}
		}
		return ret;
	},
	// "getAdoptedBy(parent)"
	adopt: function(parent, name){
		if (!this.hasOwnProperty("parent"))
			this.set_parent(parent);
		if (!this.hasOwnProperty("name"))
			this.name = name;
	},
	set_parent: function(parent){
		this.parent = parent;
	},
	clone: function(){
		var clone = Object.create(this);
		track(clone);
		clone.proto = this;
		clone.instantiate.apply(clone, arguments);
		return clone;
	}
}).set({
	extend: {
		instantiate_prototype: function(Ext, Base){
			Ext.created = CreatedQ();
			Ext.prototype.inst_cloneProps();
		}
	},
	Prop: Prop10,
	created: CreatedQ()
});