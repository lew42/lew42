/*

USE CONSISTENT LAYOUTS - THAT'S THE IMPORTANT THING
It doesn't really matter if you use rems w/ rappers,
or naked percents... As long as its consistent...



CSS switches are better than overrides

.one or .two is better than .one or .one.two

*/

.naked-grid-spacing(@n, @y_with_units, @x_with_units){
	@y: @y_with_units;
	// @x: @x_unitless; /* has to be % */
	@x: @x_with_units; // I think LESS can handle the math with units... 
	@width_pad: 100/@n - 2*@x;
	@width_zg: 2*@x/@n + @width_pad;
	// padding: @y @x;

	/* "space between" - no outside padding */
	&.space {
		> * {
			margin: @y @x;
			flex-basis: @width_zg;
			max-width: @width_zg;
		}
	}

	/* I suppose .space.pad could be used for the fully spaced and padded.
	That would allow .pad without .space, so you could have % padding on the grid itself, which I suppose could be helpful. 


.pad.space doesn't do anything... .pad overrides .space, and so .pad vs .pad.space has no effect.

Also, having .pad, .space, and .pad.space makes it trickier - I'd have to rewrite the width function to account for padding, but no spacing... 

	*/
	&.pad { 
		padding: @y @x;
		> * {
			margin: @y @x;
			flex-basis: @width_pad;
			max-width: @width_pad;
		}
	}

	&.break > * {
		/* rather than do a gutter fix for all items in a 1 col grid */
		margin-left: 0;
		margin-right: 0;
	}
}


.cols-2, .grid-2 {
	.core() {
		display: flex;
		flex-wrap: wrap;
		> * {
			flex: 1;
		}
	} .core();
	&.one {
		> * {
			flex-basis: 100%;
		}
		&.limit:not(.break) {
			> * {
				max-width: 100%;
			}
		}
	}
	&.two {
		> * {
			flex-basis: 50%;
		}
		&.limit:not(.break) {
			> * {
				max-width: 50%;
			}
		}
	}
	&.three {
		> * {
			flex-basis: 100/3%;
		}
		&.limit:not(.break) > * {
			max-width: 100/3%;
		}
	}

	&.four {
		> * {
			flex-basis: 25%;
		}
		&.limit:not(.break) > * {
			max-width: 25%;
		}
	}
}

.cols-2 {
	&.break {
		display: block;
	}
}

.grid-2 {
	&.naked { /* naked meaning items have no wrappers 
		the only way to do that is with % side margins.
		But, anything else is legit for top/bottom... 
			Top and bottom spacing of em/rem will lead to unequal 
			vertical/horizontal gutters...
			To keep equal gutters, we need to use the same %.. 

		Gutter sizing should be standardized for rhythm.  But, sizes are arbitrary,
		and could be defined per-project. */

		&.two {
			.naked-grid-spacing(2, 1%, 1%);
			> * {
				&:nth-child(2n+1){
					margin-left: 0;
				}
				&:nth-child(2n){
					margin-right: 0;
				}
				&:nth-child(1) {
					margin-top: 0;
				}
				&:nth-last-child(1) {
					margin-bottom: 0;
				}
			}
			&:not(.break) > * {
				/* when we .break, these mess up the spacing */
				&:nth-child(1), &:nth-child(2) {
					margin-top: 0;
				}
				&:nth-last-child(1), &:nth-last-child(2) {
					margin-bottom: 0;
				}

			}
		}
	}
}

/* 
This just makes it way harder to work with, or way too much duplicated code.
Either you have to import ALL grid math (one, two, three, four...)
or you can't use those other styles...
*/
.grid-test-1 {
	.grid-2.core();
	.grid-2.three;
	// .grid-2.limit;
}




.grid-two-gutter-fix() {
	> * {
		&:nth-child(2n+1){
			margin-left: 0;
		}
		&:nth-child(2n){
			margin-right: 0;
		}
		&:nth-child(1) {
			margin-top: 0;
		}
		&:nth-last-child(1) {
			margin-bottom: 0;
		}
	}
	&:not(.break) > * {
		/* when we .break, these mess up the spacing */
		&:nth-child(1), &:nth-child(2) {
			margin-top: 0;
		}
		&:nth-last-child(1), &:nth-last-child(2) {
			margin-bottom: 0;
		}

	}
}

/* Actual spacing is double these values, since there is padding + margin around the edges, and double margin from 2 neighboring items */
.grid-spacing(@n, @y, @x){
	@width: 100/@n - 2*@x;
	padding: unit(@y, %) unit(@x, %);
	> * {
		margin: unit(@y, %) unit(@x, %);
		width: unit(@width, %);
	}
	&.break > * {
		width: 100%;
	}
	&.zg {
		padding: 0;
		> * {
			width: unit(2*@x/@n + @width, %);
		}
		&.break > * {
			width: 100%;
			margin-left: 0;
			margin-right: 0;
		}
	}
}

.grid {
	display: flex;
	flex-wrap: wrap;

	> *, > .half {
		width: 50%;
	}

	&.three > *, > .third {
		width: unit(100/3, %);
	}

	> .thirds {
		width: unit(200/3, %);
	}

	&.four > *, & > .fourth, & > .quarter {
		width: 25%;
	}

	&.spaced {
		.grid-spacing(2, 1, 1.25);
		&.large {
			.grid-spacing(2, 2, 2.5);
		}
		&.zg:not(.three):not(.four) {
			.grid-two-gutter-fix();
			// &:nth-child(1), &:nth-child(2) {
			// 	margin-top: 0;
			// }
			// &:nth-last-child(1), &:nth-last-child(2) {
			// 	margin-bottom: 0;
			// }
		}
	}

	&.spaced.three {
		.grid-spacing(3, 1, 1.25);
		&.large {
			.grid-spacing(3, 2, 2.5);
		}
		&.zg {
			> * {
				&:nth-child(3n+1){
					margin-left: 0;
				}
				&:nth-child(3n){
					margin-right: 0;
				}
				&:nth-child(1), &:nth-child(2), &:nth-child(3) {
					margin-top: 0;
				}
				&:nth-last-child(1), &:nth-last-child(2), &:nth-last-child(3) {
					margin-bottom: 0;
				}
			}
		}
	}

	&.spaced.four {
		.grid-spacing(4, 1, 1.25);
		&.large {
			.grid-spacing(4, 2, 2.5);
		}
		&.zg {
			> * {
				&:nth-child(4n+1){
					margin-left: 0;
				}
				&:nth-child(4n){
					margin-right: 0;
				}
				&:nth-child(1), &:nth-child(2), &:nth-child(3), &:nth-child(4) {
					margin-top: 0;
				}
				&:nth-last-child(1), &:nth-last-child(2), &:nth-last-child(3), &:nth-last-child(4) {
					margin-bottom: 0;
				}
			}
		}
	}


	&.break {
		> * {
			width: 100%;
		}
	}
}


.auto-grid {
	display: flex;
	flex-wrap: wrap;
	> * {
		flex: 1;
	}
}