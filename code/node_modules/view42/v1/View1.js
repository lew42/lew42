var Mod = require("mod42/v1");
var is = require("util42/is");

var View = module.exports = Mod.extend({
	tag: "div",
	instantiate: function(){
		this.config.apply(this, arguments);
		this.instantiate_el();
		this.set.apply(this, arguments);
		this.initialize();
	},
		config: function(){
			this.config_tag.apply(this, arguments);
		},
			config_tag: function(){
				for (var i = 0; i < arguments.length; i++){
					if (is.pojo(arguments[i]) && arguments[i].tag){
						this.tag = arguments[i].tag;
					}
				}
			},
		instantiate_el: function(){
			if (this.el){
				this.el = this.el.cloneNode(false); // shallow clone, we'll rebuild it dynamically
			} else {
				this.el = document.createElement(this.tag);
			}
			this.node = this.el;
		},
		set_: function(value){
			if (is.fn(value)){
				this.render = value;
			} else {
				this.el.textContent = value;
			}
		},
	initialize: function(){
		this.render();
		this.update();
	},
	display: "", // don't use this property...
	toggle: function(){
		var display = this.style().display;
		if (display === "none")
			this.el.style.display = this.display;
		else {
			this.display = display;
			this.hide();
		}
	},
	style: function(){
		return getComputedStyle(this.el);
	},
	hide: function(){
		if (!this.display){
			this.display = this.style().display;
		}
		this.el.style.display = "none";
	},
	render: function(){},
	update: function(){},
	append: function(value){
		var arg;
		for (var i = 0; i < arguments.length; i++){
			arg = arguments[i];
			if (is.simple(arg)){
				this.el.append(arg.toString());
			} else if (is.pojo(arg)){
				for (var j in arg){
					if (arg[j].el){
						this[j] = arg[j];
						this[j].addClass(j);
						this.el.appendChild(arg[j].el);
					} else {
						this[j] = document.createTextNode(arg[j].toString());
						this.el.appendChild(this[j]);
					}
				}
			} else if (arg.el){
				this.el.appendChild(arg.el);
			} else {
				this.el.append(arg);
			}
		}
	},
	getOrMakeNode: function(any){
		if (is.simple(any)){
			return any.toString();
		} else if (is.pojo(any)){
			for (var i in any){
				this.getOrMakeNode(any[i]);
			}
		}
	},
	prepend: function(value){
		var arg;
		for (var i = 0; i < arguments.length; i++){
			arg = arguments[i];
			if (is.simple(arg)){
				this.el.prepend(arg.toString());
			} else if (is.pojo(arg)){
				for (var j in arg){
					if (arg[j].el){
						this[j] = arg[j];
						this[j].addClass(j);
						this.el.prepend(arg[j].el);
					} else {
						this[j] = document.createTextNode(arg[j].toString());
						this.el.prepend(this[j]);
					}
				}
			} else if (arg.el){
				this.el.prepend(arg.el);
			} else {
				this.el.prepend(arg);
			}
		}
	},
	addClass: function(c){
		this.el.classList.add(c);
		return this;
	},
	removeClass: function(c){
		this.el.classList.remove(c);
		return this;
	}
});