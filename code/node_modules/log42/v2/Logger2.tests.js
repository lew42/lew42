var test = require("test42");
var View = require("view42/v8");
var util = require("util42");
var is = util.is;

var assert = test.assert;

var Base = require("base42/v1");

var Logger = require("./Logger2");


test("basic", function(){
	var Base2 = Base.extend({
		name: "Logified",
		log: Logger()
	});

	var base = Base2({
		// log: false,
		method: function(){
			// var log = this.log;
			// var log = this.log.on;
			var log = this.log;

			if (log === log.on){
				console.info("Logging starts on.");
				log("You should see this.");
			} else {
				console.info("Logging starts off.");
				log("You shouldn't see this.");
			}


		}
	});

	base.method();

	/*
	Try:
	log: true, false, nothing

	*/
});


test("permutations", function(){
	var Logged = Base.extend({
		name: "Logged",
		log: Logger(),
		active: function(){
			var log = this.log.on;
			console.group(".active()");
				console.log("this should ALWAYS be on");
				log.info("You should see me.");
			console.groupEnd();
		},
		auto: function(){
			var log = this.log;
			console.group(".auto()");
				console.log("this uses the current state");
				log.info("Can you see me?");
			console.groupEnd();
		},
		noop: function(){
			var log = this.log.off;
			console.group(".noop()");
				console.log("this should NEVER be on");
				log.error("You should NOT see me!!!");
			console.groupEnd();
		},
		test: function(){
			// this.active();
			this.auto();
			// this.noop();
		}
	});

	test("default", function(){
		var mod = Logged();
		mod.test();
	});

	test("true", function(){
		var mod = Logged({
			log: true
		});
		mod.test();
	});

	test("false", function(){
		var mod = Logged({
			log: false
		});
		mod.test();

		/* This is the same result as default.  In the case that the logger is currently set as the noop logger, then setting log: false doesn't change anything.

		In the case that the logger is currently set to the active logger, then we have a use case for log: false that's different from not setting a log: value.   See below... */
	});

	test("extending", function(){
		var On = Logged.extend({
			log: true
		});
		var Off = Logged.extend({
			log: false // this is default.. and setting this to false only matters if the base (here, the Logged class) is set to on (or *could* be set to on).
		});

		test("On", function(){
			test("default", function(){
				var on = On();
				on.test();
			});

			test("false", function(){
				var wasOn = On({
					log: false
				});
				wasOn.test();
			});
		});
	});
});

/*

In general, if we turn logging on for a Base class, a default assumption could be that all extensions utilize that state.  It's certainly possible to explicitly override, and set an extension to true/false.

The point is, if you go setting specific values for every class (heavy utilization of log: true or log: false), then it makes it harder to utilize this inheritance.

So keep the log state to auto (let it inherit).  When you need to log something, turn it on at the appropriate level, and then turn it off when you're done.
*/