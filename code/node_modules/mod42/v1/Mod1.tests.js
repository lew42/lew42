var test = require("test42");
var view = require("view42");
var assert = test.assert;
var util = require("util42");
var is = util.is;

var Mod = require("./Mod1");

test("basic", function(){
	test.assertClass(Mod, false);
});

test("pojo", function(){
	var Mod2 = Mod.extend({
		shared: {},
		willClone: {}
	});

	var mod = new Mod2({
		willClone: {
			prop: 1
		}
	});

	assert(mod.shared === Mod2.prototype.shared);
	assert(mod.willClone !== Mod2.prototype.willClone);
	assert(Object.keys(Mod2.prototype.willClone).length === 0);
	assert(mod.willClone.prop === 1);
});

test("pojo.subPojo", function(){
	var Mod2 = Mod.extend({
		pojo: {
			subPojo: {}
		}
	});

	var mod1 = new Mod2({
		pojo: { // only pojo (not subPojo) gets cloned
			prop: 1
		}
	});

	assert(mod1.pojo !== Mod2.prototype.pojo);
	assert(mod1.pojo.subPojo === Mod2.prototype.pojo.subPojo);

	var mod2 = new Mod2({
		pojo: {
			subPojo: {
				prop: 1
			}
		}
	});
	assert(mod2.pojo !== Mod2.prototype.pojo);
	assert(mod2.pojo.subPojo !== Mod2.prototype.pojo.subPojo);


});

test("sub", function(){
	var Mod2 = Mod.extend({
		shared: new Mod(),
		willClone: new Mod()
	});

	var mod = new Mod2({
		willClone: {
			prop: 1
		}
	});

	assert(mod.shared === Mod2.prototype.shared);
	assert(mod.willClone !== Mod2.prototype.willClone);
	assert(Object.keys(Mod2.prototype.willClone).length === 0);
	assert(mod.willClone.prop === 1);
});

test("logger", function(){
	var base = new Mod({
		log: {
			log: true,
			method: {
				instantiate: false
			},
			api: {
				custom: function(a, b){
					return this.f({ all: "background: #ddd;" }, ["one", "color: blue"], [a, "color: green"], [b, "color: red"], ["four", "color: purple"]);
				}
			}
		}
	});

	base.method = function(){
		this.log("rawr");
	};

	base.log("hi");
	base.method();

	base.log.f(["hello", "color: green"], ["world", "color: blue"])();

	var test = function(a, b){
		return base.log.f({ all: "background: #ddd;" }, ["one", "color: blue"], [a, "color: green"], [b, "color: red"], ["four", "color: purple"]);
	}

	test("two", "three")();
	base.log.custom("hello", "world")();

	var test2 = function(flog){
		return base.log.f({ all: "margin-right: 10px;"}, ["first", "background: blue"], flog, ["last", "background: red"]);
	}

	test2(test("two", "three"))();
});

// test("assign", function(){
// 	var Sub = Mod.extend({
// 		name: "Sub",
// 		assignedTo: function(parent, name){
// 			// console.log('assignedTo', parent, name);
// 			this.name = name;
// 			this.parent = parent;
// 		}
// 	});

// 	var parent = new Mod({
// 		name: "parent",
// 		child: Sub()
// 	});

// 	assert(parent.child instanceof Sub);
// 	assert(parent.child.parent === parent);
// 	assert(parent.child.name === "child");
// });

// test("assignedTo", function(){
// 	var mod = new Mod({
// 		sub: Mod.sub()
// 	});

// 	assert(mod.sub.parent === mod);
// 	assert(mod.sub instanceof Mod);
// 	assert(mod.sub.name === "sub");
// });