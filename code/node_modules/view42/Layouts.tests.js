var View = require("./View1");
require("./layouts.less");
var test = require("test42");

setTimeout(function(){
	$(window).resize();
}, 0);

var Resp = View.extend({
	fsa: true,
	behaviors: function(){
		var view = this;
		$(window).resize(this.rsz.bind(this));
	},
	adjustFontSize: function(){
		var width = this.$el.width();
		this._width = width;

		if (width < 300){
			this.realWidth = width;
		} else {
			this.realWidth = 7*width - 1800;
		}
		// console.group(width);
		var size = 7/4;
		size = size - (width/400);
		// console.log(size);

		if (this.fsa){
			if (width < 300){
				this.css("font-size", "1em");
			} else if (width > 2400){
				this.css("font-size", "0.25em");
			} else {
				this.css("font-size", size + "em");			
			}	
		}
	},
	rsz: function(){
		this.adjustFontSize();
	}
});

var Cols = View.extend({
	name: "Cols",
	behaviors: function(){
		$(window).resize(this.breakpoint.bind(this));
	},
	breakpoint: function(){
		if (this.$el.width() < this.break){
			if (!this.$el.hasClass("break")){
				// console.log("width", this.$el.width(), this.id);
				this.addClass("break");
				this.refresh();
			}
		} else {
			if (this.$el.hasClass("break")){
				// console.log("width", this.$el.width(), this.id);
				this.removeClass("break");
				this.refresh();
			}

		}
	},
	refresh: function(){
		setTimeout(function(){
			$(window).resize();
		}, 0);
	},
	break: 600,
	make: function(n){
		for (var i = 0; i < n; i++){
			View({
				addClass: "box2",
				content: function(){
					View.p().filler("1-3s");
					View.p().filler("1-3s");
				}
			})
		}
	}
});

var Grid = Cols.extend({
	removeClass: "cols",
	name: "Grid",
	behaviors: function(){
		$(window).resize(this.breakpoint.bind(this));
	},
	breakpoint: function(){
		var width = this.$el.width();

		if (width < this.break){
			this.removeClass("two three");
		} else if (width < (this.break*2)){
			this.removeClass("three").addClass("two")
		} else {
			this.addClass("three").removeClass("two");
		}
	},
});

var Sink = View.extend(function(){
	View.h1("This is an H1");
	View.p().filler("1-2s");
	View.h2("This is an H2");
	View.p().filler("1-2s");
	View.h3("This is an H3");
	View.p().filler("1-2s");
});

var Hero = View.extend({
	name: "Hero",
	content: function(){
		View.h2("This is a Hero");
		View.p().filler("1-2s");
		View("Call to action").addClass("cta");
		this.more();
	},
	more: function(){}
});

var Box1 = View.extend({
	name: "Box1",
	content: function(){
		View.h1().filler("1s");
		View.p().filler("2-3s");
		View("Click Here");
	}
});

var BgBox = View.extend({
	name: "BgBox",
	content: function(){
		View().addClass("banner");
		View.h3().filler("1s");
		View.p().filler("2-3s");
		View(function(){
			this.append("more").addClass("btn");
			View.Icon("angle-right");
		});
	}
});

var Cols2 = Cols.extend({
	name: "Cols2",
	removeClass: "cols"
});

test("cols2", function(){
	Cols2(function(){
		this.make(5);
	});
});

test("bg box", function(){
	Cols(function(){
		this.addClass("blue-bg spaced large");

		BgBox(function(){
			View().addClass("banner");
			View.h3("Wow, this looks like shit without the button");
			View.p("Even if it's not positioned correctly, at all..");
			View(function(){
				this.append("more").addClass("btn");
				View.Icon("angle-right");
			});
		});

		BgBox(function(){
			View().addClass("banner");
			View.h3("Content wrapper needed for padding.");
			View.p("Instead of adding padding/margin to each content element (here, the h3, p, and button), we need to just wrap all the padded content with a content() container.");
		});

		BgBox.make(6);
	});
});

test("make", function(){
	Box1.make(5);
});

test("spaced, large", function(){
	Cols(function(){
		View().filler("1-2s");
		View().filler("1-2s");
		View().filler("1-2s");
		View().filler("1-2s");
	});	
	Cols(function(){
		this.addClass("spaced");
		View().filler("1-2s");
		View().filler("1-2s");
		View().filler("1-2s");
		View().filler("1-2s");
	});	
	Cols(function(){
		this.addClass("spaced large");
		View().filler("1-2s");
		View().filler("1-2s");
		View().filler("1-2s");
		View().filler("1-2s");
	});
});

test("spaced zg, large zg", function(){
	Cols(function(){
		View().filler("1-2s");
		View().filler("1-2s");
		View().filler("1-2s");
		View().filler("1-2s");
	});	
	Cols(function(){
		this.addClass("spaced zg");
		View().filler("1-2s");
		View().filler("1-2s");
		View().filler("1-2s");
		View().filler("1-2s");
	});	
	Cols(function(){
		this.addClass("spaced large zg");
		View().filler("1-2s");
		View().filler("1-2s");
		View().filler("1-2s");
		View().filler("1-2s");
	});

	Cols(function(){
		View(function(){
			Hero({
				more: function(){
					Cols(function(){
						this.addClass("spaced large zg");
						View().filler("1-2s");
						View().filler("1-2s");
						View().filler("1-2s");
						View().filler("1-2s");
					});
				}
			});
			// Cols
		});
	});
});

test("nestings", function(){
	Cols(function(){
		this.addClass("style-1")
		View().addClass("third");
		View(function(){
			Hero();
		}).addClass("thirds");
	});	
	Cols(function(){
		this.addClass("style-2")
		Cols(function(){
			this.addClass("spaced");
			this.make(4);
		}).addClass("thirds");
		View(function(){
			Hero();
		}).addClass("third");
	});
	Cols(function(){
		this.break = 800;
		View(function(){
			Hero();
			
		}).addClass("v-center");
		Cols(function(){
			this.fsa = false;
			this.break = 399;
			this.log = true;
			this.make(4);
		});
	});
});

test("mixed", function(){
	View().addClass("full-1");
	View().addClass("centered-1");
	View(function(){
		View().addClass("full-1");
		View().addClass("centered-1");
		View().addClass("full-1");
	}).addClass("full-1");
	View().addClass("centered-1");
	View(function(){
		View().addClass("full-1");
		View().addClass("centered-1");
		View().addClass("full-1");
	}).addClass("centered-1");
});

test("centered", function(){
	View(function(){
		Grid(function(){
			this.make(5);
		});
	}).addClass("centered-85");
});

test("layout-1", function(){
	this.view.addClass("layout-1");
	Sink();
});

test("Resp", function(){
	Resp().filler("2-4s");
});

test("Cols", function(){
	Cols(function(){
		this.break = 800;
		Sink();
		View().filler("2-4s");
	}).addClass("layout-4");
});

test("Cols2", function(){

	Cols(function(){
		this.break = 800;
		View(function(){
			Sink();
		}).addClass("left");
		View().addClass("right").filler("3-4p");
	}).addClass("layout-5");
});

test("grid", function(){

	Grid(function(){
		this.make(5);
	})

});