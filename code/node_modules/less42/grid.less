.grid-two-gutter-fix() {
	> * {
		&:nth-child(2n+1){
			margin-left: 0;
		}
		&:nth-child(2n){
			margin-right: 0;
		}
		/* when we .break, these mess up the spacing */
		&:nth-child(1), &:nth-child(2) {
			// margin-top: 0;
		}
		&:nth-last-child(1), &:nth-last-child(2) {
			// margin-bottom: 0;
		}
	}
}

/* Actual spacing is double these values, since there is padding + margin around the edges, and double margin from 2 neighboring items */
.grid-spacing(@n, @y, @x){
	@width: 100/@n - 2*@x;
	padding: unit(@y, %) unit(@x, %);
	> * {
		margin: unit(@y, %) unit(@x, %);
		width: unit(@width, %);
	}
	&.break > * {
		width: 100%;
	}
	&.zg {
		padding-left: 0;
		padding-right: 0;
		> * {
			@w: 2*@x;
			@z: @w / @n;
			@a: @z + @width;
			width: unit(@a, %);
		}
		&.break > * {
			width: 100%;
			margin-left: 0;
			margin-right: 0;
		}
	}
}

.grid {
	display: flex;
	flex-wrap: wrap;

	> *, > .half {
		width: 50%;
	}

	&.three > *, > .third {
		width: unit(100/3, %);
	}

	> .thirds {
		width: unit(200/3, %);
	}

	&.four > *, & > .fourth, & > .quarter {
		width: 25%;
	}

	&.spaced {
		.grid-spacing(2, 1, 1.25);
		&.large {
			.grid-spacing(2, 2, 2.5);
		}
		&.zg:not(.three):not(.four) {
			.grid-two-gutter-fix();
		}
	}

	&.spaced.three {
		.grid-spacing(3, 1, 1.25);
		&.large {
			.grid-spacing(3, 2, 2.5);
		}
		&.zg {
			> * {
				&:nth-child(3n+1){
					margin-left: 0;
				}
				&:nth-child(3n){
					margin-right: 0;
				}
			}
		}
	}

	&.spaced.four {
		.grid-spacing(4, 1, 1.25);
		&.large {
			.grid-spacing(4, 2, 2.5);
		}
		&.zg {
			> * {
				&:nth-child(4n+1){
					margin-left: 0;
				}
				&:nth-child(4n){
					margin-right: 0;
				}
			}
		}
	}


	&.break {
		> * {
			width: 100%;
		}
	}
}