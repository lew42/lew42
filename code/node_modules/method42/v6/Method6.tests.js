var test = require("test42");
var view = require("view42");
var assert = test.assert;
var util = require("util42");
var is = util.is;

var Method = require("./Method6");
var Base = require("base42/v1");

test("assertClass", function(){
	test.assertClass(Method);
});

/*
Wrapping just follows parent.log.  If you need to wrap, 
*/

test("assign", function(){

	var obj = Base({
		name:"obj",
		log: true,
		myMethod: Method({
			log: false,
			expand: true,
			fn: function(){
				var log = this.log.off;
				console.log("myMethod", this.log.active);
			}	
		}),
		test: function(){
			console.log("this.log.active:", this.log.active);
			this.log("!!!!!!!!!!!!!");
			this.myMethod();
			console.log("this.log.active:", this.log.active);
			this.log("how the fuck..?");
		}
	});

	console.log("wrapped", !!obj.myMethod.method);
	obj.test();
});

/*
There's a tricky use case - parent.log = true, method.log = false
Does not wrap, so can't turn the log off...

If parent.log: true, and Method.log: false, we could still wrap, so we can silence that method...?

parent.log: off
method.log: auto
no wrap, no log

parent.log: on
method.log: auto
wrap and log

parent.log: off
method.log: on
wrap and log

parent.log: on
method.log: on
wrap and log

parent.log: off
method.log: off
no need to wrap

parent.log: on
method.log: off
wrap, so we can squelch
*/