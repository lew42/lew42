@import "layouts.less";
@import "~less42/typography.less";
.g2 {
	display: flex;
	* > {
		flex: 1;
	}
}

.pad-m {
	padding: 1em 1.2em;
}

.pad-l {
	padding: 1.5em 1.75em;
}

.pad-p {
	padding: 4% 4.5%;
}

.std-layout(@em: 1) {
	margin: unit(@em, em) 0;
	> * {
		margin: unit(@em * .9, em) 0;
	}
	&:first-child, > :first-child {
		margin-top: 0;
	}
	&:last-child, > :last-child {
		margin-bottom: 0;
	}
	.stacked > &, &.stacked > * {
		margin-top: 0;
		margin-bottom: 0;
	}
}

.itm {
	.trans;
	.std-layout;
	> * { .trans }

	h1 {
		font-size: 2em;
		margin: 0.5em 0;
	}

	h2 {
		font-size: 1.5em;
		margin: 0.75em 0;
	}
}

.ddd {
	background: #ddd;
}

.blue-rad-grad {
	background: radial-gradient(ellipse at center, rgba(255,255,255,1) 0%, rgba(255,255,255,0.5) 100%);
	    background-color: blue;
}

.full-2 {
	.trans;
	min-height: 5em;
}
/* padding: 1em 1.2em */
.pad-m {
	border: 1px solid black;
	> .full-2 {
		margin-left: -1.2em;
		margin-right: -1.2em;
		border: 1px solid blue;

		&:first-child {
			margin-top: -1em;
			margin-bottom: 1em;
		}
		&:last-child {
			margin-bottom: -1em;
			margin-top: 1em;
		}
	}
}
/* padding: 4% 4.5% */
.pad-p {
	@px: 5;
	@py: 5;
	.trans;
	padding: unit(@py, %) unit(@px, %);
	@x: unit(-100 / 18, %);
	@rev: 100 / (100 - 2*@px);
	@x2: unit(-1 * @px * @rev, %);
	> * {
		.trans;
	}
	> .full-2 {
		margin: 0 @x2;

		&:first-child {
			margin-top: unit(-1 * @py * @rev, %);
		}
		&:last-child {
			margin-bottom: unit(-1 * @py * @rev, %);
		}
	}

	.std-layout-p(@py);
}


.std-layout-p(@y: 2) {
	margin: unit(@y, %) 0;
	> * {
		margin: unit(@y, %) 0;
	}
	&:first-child, > :first-child {
		margin-top: 0;
	}
	&:last-child, > :last-child {
		margin-bottom: 0;
	}
	.stacked > &, &.stacked > * {
		margin-top: 0;
		margin-bottom: 0;
	}
}

.edged {
	box-shadow: inset 1px 1px 1px rgba(255, 255, 255, 0.25), inset -1px -1px 1px rgba(0, 0, 0, 0.25);
}

.trans2 {
		background: rgba(0,0,0,0.05);
}

.x-all {
	* {
		/*.trans2;*/
	}
	:first-child {
		margin-top: 0;
	}
	:last-child {
		margin-bottom: 0;
	}
	.stacked, .stack > * {
		margin-top: 0;
		margin-bottom: 0;
	}

	.x-full {
		.trans;
		&.mh5 {
			min-height: 5em;
		}
	}
}

.mx(@m){
	margin-left: @m;
	margin-right: @m;
}

.pmix{
	@p: 1;
	.pp(@p);
	> * {
		margin-top: unit(@p, %);
		margin-bottom: 0;
		padding-bottom: 0.5em;
		.mx(0.5em);
		&:last-child {
			margin-bottom: 0;
		}
	}
}

.pad-em-trbl(@t, @r, @b, @l){
	@emt: unit(@t, em);
	@emr: unit(@r, em);
	@emb: unit(@b, em);
	@eml: unit(@l, em);
	padding: @emt @emr @emb @eml;
	> .x-full {
		margin-left: unit(@l * -1, em);
		margin-right: unit(@r * -1, em);
		&:first-child {
			margin-top: unit(@t * -1, em);
		}
		&:last-child {
			margin-bottom: unit(@t * -1, em);
		}
	}
}

.pp-trbl(@t, @r, @b, @l){
	@pt: unit(@t, %);
	@pr: unit(@r, %);
	@pb: unit(@b, %);
	@pl: unit(@l, %);
	padding: @pt @pr @pb @pl;
	@rev: 100 / (100 - @l - @r);
	@rl: @l * @rev;
	@rr: @r * @rev;
	@rt: @t * @rev;
	@rb: @b * @rev;

	> * {
		margin-top: @pt;
		margin-bottom: unit(1 - (1 / @t), rem);
	}

	> .x-full {
		margin-left: unit(-1 * @rl, %);
		margin-right: unit(-1 * @rr, %);
		margin-bottom: unit(@rt, %); /* this is like top padding for the next child */
		margin-top: unit(@rt, %);
		&:first-child {
			margin-top: unit(-1 * @rt, %);
		}
		&:last-child {
			margin-bottom: unit(-1 * @rb, %);
		}
		&.pad {
			/* top is usually a little smaller than bottom, and while this isn't completely legit, i think it'll work for now */
			padding: unit(@rt, %) unit(@rr, %) unit(@rt, %) unit(@rl, %);
		}
	}

	/**/

	> .x-full + * {
		margin-top: unit(@rt, %);
	}
/*
	> * + .x-full {
		margin-top: -1em;
	}*/

}

.pad-em-yx(@y, @x){
	.pad-em-trbl(@y, @x, @y, @x);
}

.pp-yx(@y, @x){
	.pp-trbl(@y, @x, @y, @x);
}

.pad-em-txb(@t, @x, @b){
	.pad-em-trbl(@t, @x, @b, @x);
}

.pp-txb(@t, @x, @b){
	.pp-trbl(@t, @x, @b, @x);
}

.pem(@em){
	/* @em is numeric, not em units, but will be em units */
	.pad-em-txb(@em, 1.25*@em, 1.25*@em);
}

.pp(@p){
	/* @p is numeric, not % units, but will be % units */
	.pp-yx(@p, 1.2* @p);
}




.cards {
	background: #ddd;
	.pp-yx(2, 2);
}

.card {
	.s-1em;
	.p-3p;
	background: #fff !important;
	box-shadow: 1px 1px 1px rgba(0,0,0,0.2);
}


/* These ingredients should also be overrides (come after the core css) */

.p-1p {
	.pp-yx(1, 1.5);
}

.p-2p {
	.pp(2);
}
.p-3p {
	.pp(3);
}
.p-4p {
	.pp(4);
}
.p-5p {
	.pp(5);
}


.p-1em {
	.pem(1);
}

.p-2em {
	.pem(2);
}

.p-3em {
	.pem(3);
}

.p-4em {
	.pem(4);
}

.p-5em {
	.pem(5);
}



.sp(@size){
	@perc: unit(@size, %);
	margin-top: @perc;
	margin-bottom: @perc;
}

.sem(@sem){
	@em: unit(@sem, em);
	margin-top: @em;
	margin-bottom: @em;
}

/*
Don't apply blanket margin-top/bottom (ems) to items, without accounting for font-size changes.

If we want to adjust spacing, we need to calculate each element's spacing based on its current font-size, which could be tricky...

Or, just use rems, which will stay constant for all items

Or, if using ems (which will be more dynamic, and accept container's font-size adjustments) with a "> *" selector, just make sure to follow a list > item pattern, so all items have the same font-size.
*/

.s-1em, .sc-1em > * {
	.sem(1);
}

.s-2em, .sc-2em > * {
	.sem(2);
}

.s-3em, .sc-3em > * {
	.sem(2);
}

.s-4em, .sc-4em > * {
	.sem(4);
}

.s-5em, .sc-5em > * {
	.sem(5);
}

.s-1p {
	.sp(1);
}

.s-2p {
	.sp(2);
}

.s-3p {
	.sp(3);
}

.s-4p {
	.sp(4);
}

.s-5p {
	.sp(5);
}