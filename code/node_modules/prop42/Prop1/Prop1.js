var Value1 = require("value42/Value1");
var Q1 = require("q42/Q1");
var track = require("track42");

var Prop1 = module.exports = Value1.extend({
	name: "Prop1",
	// inst: function(){
	// 	this.changed = Q1({
	// 		parent: this,
	// 		ctx: this.parent // this.parent is undefined (.inst runs before .set)
	// 	});
	// },
	init: function(){
		Value1.prototype.init.call(this);
		this.changed.ctx = this.parent;
		this.init_define();
		if (this.parent && this.parent.props)
			this.parent.props[this.name] = this;
	},
	init_define: function(){
		if (!this.parent){
			console.warn("no parent")
			return false;
		}
		var name = this.name;
		var prop = this;

		Object.defineProperty(this.parent, name, {
			get: function(){
				return prop.get_value();
			},
			set: function(value){
				if (this.hasOwnProperty(name)){
					prop.set_value(value);
				} else {
					new prop.constructor({
						name: name,
						parent: this,
						value: value
					});
				}
			},
			configurable: true
		});
	},
	clone: function(){
		var clone = Object.create(this);
		track(clone);
		clone.proto = this;
		clone.instantiate.apply(clone, arguments);
		return clone;
	}
});