var Base = require("base42");
var logger = require("log42");

var Set = require("set42");
var Extend = require("extend42");

var	set = Set().fn;
var	extend = Extend().fn;

var _Mod = Base.extend({
	name: "_Mod",
	set: set
}).assign({
	extend: extend, // extend depends on prototype.set...
	set: set
})

var Mod = module.exports = _Mod.extend({
	name: "Mod10",
	instantiate: function(){
		this.inst && this.inst();
		this.set.apply(this, arguments);
		this.initialize.apply(this, arguments);
		return this;
	},
	initialize: function(){
		this.init();
	},
	init: function(){},
	set_log: function(value){
		logger.install(this, value);
	},
	set_parent: function(parent){
		this.set.mfn.assignProp(this, 'parent', parent);
	}
});

logger.install(Mod);
logger.install(Mod.prototype);

Mod.Sub = Mod.extend({
	name: "Sub",
	set: {
		added: function(sub, parent, name){
			// only adopt if its an orphan
			if (!sub.hasOwnProperty('parent')){
				sub.set({ 
					parent: parent, // can use set_parent as a hook
					name: name
				});
			}
		}
	}
});