var test = require("test42");
var view = require("view42");
var assert = test.assert;
var util = require("util42");
var is = util.is;

var Mod = require("mod42/Mod4");

var Promise = require("bluebird");

require("./Route4.less");
// var Route = require("./index");
// var Router = require("./Router4");
// // var Page = require("./Page");
// // var Router = Route.Router;

// 	var router = window.router = Router("/test/route42/Route4/Route4/");
// 	// router.useCurrent();

// 	var a = router.add("a");
// 	var a1 = a.add("a1");
// 	var a2 = a.add("a2");

// 	var a2x = a2.add("a2x");
// 	var a2y = a2.add("a2y");
// 	var a2z = a2.add("a2z");

// 	var a3 = a.add("a3");
// 	var b = router.add("b");
// 	var c = router.add("c");

// 	router.activate();
// 	router.render()

test("tree", function(){
	var Item = Mod.extend({
		name: "Item",
		items: [],
		render: function(){
			this.view = view({
				addClass: "item",
				item: this,
				// preview: view.x({
				// 	isActiveNode: view.Icon.x("flag").hide(),
				// 	isActive: view.Icon.x("asterisk").hide(),
				// 	isActiveParent: view.Icon.x("pinterest").hide(),
				// 	label: view.x(function(){
				// 		var item = this.parent.parent.parent;
				// 		this.append(item.name + "{" + item.id + "}")
				// 	}).addClass("label"),
				// 	activeChild: view.x({
				// 		icon: view.Icon.x("hashtag"),
				// 		label: view.x(function(){
				// 			var item = this.parent.parent.parent.parent;
				// 			this.append(item.activeChild().id);
				// 		})
				// 	}).hide(),
				// 	activate: 
				// }),
				content: function(){
					this.preview = view(function(){
						this.isActiveNode = this.Icon("flag").hide();
						this.isActive = this.Icon("asterisk").hide();
						this.isActiveParent = this.Icon("pinterest").hide();
						this.label = view(this.item.name + "{" + this.item.id + "}").addClass("label");
						this.activeChild = view(function(){
							this.activeChildIcon = this.Icon("hashtag");
							this.activeChildLabel = view(this.item.activeChild().id);
						}.bind(this)).hide();

						this.activate = this.Icon("bolt").click(function(){
							this.item.activate();
						}.bind(this)).addClass("activator");
						
					}.bind(this)).addClass("preview item");

					this.children = view(function(){
						this.item.each(function(item){
							item.render();
						}.bind(this));
					}.bind(this)).addClass("children");

					this.rerender();
				},
				rerender: function(){
					if (this.item.isActiveNode())
						this.isActiveNode.show();
					else
						this.isActiveNode.hide();

					if (this.item.isActive())
						this.isActive.show()
					else
						this.isActive.hide();

					if (this.item.isActiveParent())
						this.isActiveParent.show()
					else
						this.isActiveParent.hide()

					var activeChild = this.item.activeChild();
					if (activeChild){
						this.activeChildLabel.text(activeChild.id);
						this.activeChild.show();
					} else {
						this.activeChild.hide();
					}

					this.item.each(function(item){
						item.view.rerender();
					});
				}
			});
		},
		activate: function(){
			this.root.activeNode = this;
			this.root.view.rerender();
		},
		isActive: function(){
			return this.isActiveNode() || this.isActiveAncestor();
		},
		isActiveAncestor: function(){
			return this.root.activeNode.isDescendantOf(this);
		},
		isDescendantOf: function(route){
			var parent = this.parent;
			while (parent){
				if (parent === route)
					return true;
				parent = parent.parent;
			}
			return false;
		},
		isActiveNode: function(){
			return this.root.activeNode === this;
		},
		isActiveParent: function(){
			var activeChild = this.activeChild();
			return activeChild && activeChild.isActiveNode();
		},
		add: function(name){
			var item = new Item({
				name: name,
				parent: this,
				root: this.root
			});

			this.items.push(item);
			return item;
		},
		activeChild: function(){
			var current = this.root.activeNode;
			while (current){
				if (current.parent === this)
					return current;
				current = current.parent;
			}
			return false;
		},
		each: function(fn){
			for (var i = 0; i < this.items.length; i++){
				fn.call(this, this.items[i]);
			}
		},
		logAll: function(){
			console.group(this.name);
			console.log("isActiveNode", this.isActiveNode());
			console.log("isActive", this.isActive());
			console.log("isActiveAncestor", this.isActiveAncestor());
			console.log("isActiveParent", this.isActiveParent());
			console.log("activeChild", this.activeChild && this.activeChild.id)
			console.groupEnd();
		},
		make: function(size, depth){
			if (typeof depth === "undefined")
				depth = 1;

			if (depth !== 0){
				for (var i = 1; i <= size; i++){
					this.add("sub"+i).make(size, depth-1);
				}
			}
		}
	});

	var Root = Item.extend({
		name: "Root",
		init: function(){
			this.root = this;
			this.activeNode = this;
		}
	})

	var root = Root();
	root.make(3, 3);
	root.render();
});