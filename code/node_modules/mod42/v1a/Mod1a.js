var Base = require("base42/v1");
var is = require("util42/is");

var set = require("set42/setfn1");
var Logger = require("log42/v5");

var track = require("track42");


var lowerCaseFirstChar = function(str){
	return str[0].toLowerCase() + str.substring(1);
};

var Mod = module.exports = Base.extend({
	name: "Mod",
	createConstructor: function(o){
		var name = (o && o.name) || this.name + "Ext";
		o && delete o.name;
		eval("var " + name + ";");
		var constructor = eval("(" + name + " = function " + name + "(){\r\n\
		if (!(this instanceof " + name + "))\r\n\
			return new (" + name + ".bind.apply(" + name + ", [null].concat([].slice.call(arguments)) ));\r\n\
		var instance = this.__config.apply(this, arguments) || this;\r\n\
		instance.instantiate.apply(instance, arguments);\r\n\
		return instance;\r\n\
	});");
		return constructor;
	},
	__config: function(o){
		track(this);
		this.__config_name(o);
		this.__config_log(o);
		return this.__config_proxy(o);
	},
	__config_name: function(o){},
	__config_log: function(o){
		if (is.pojo(o) && is.def(o.log)){
			this.log = this.log.logger.clone(o.log).log;
			delete o.log;
		} 
		// else {
		// 	this.log = this.log.logger.clone().log;
		// }
	},
	__config_proxy: function(o){
		if (this.log.isActive){
			return this.log.logger.getProxy(this);
		} else {
			return this;
		}
	},
	instantiate: function(){
		this.set.apply(this, arguments);
		this.initialize.apply(this, arguments);
	},
	initialize: function(){},
	set: set,
	set_log: function(){
		this.log = this.log.logger.clone.apply(this.log.logger, arguments).log;
	},
	clone: function(){
		var clone = Object.create(this);
		clone = clone.__config.apply(clone, arguments) || clone;
		clone.instantiate.apply(clone, arguments);
		return clone;
	}
}).assign({
	extend: function(o){
		var opts = {};

		// we need to configure the prototype, like we do for instances
		// we don't want the o.log property getting assigned to the prototype...
		// extract the o.log value before calling the Base1.extend
		if (is.pojo(o) && is.def(o.log)){
			opts.log = o.log;
			delete o.log;
		}
		
		// Base1.extend will assign all the args...
		// Ext = Base.extend.apply(this, arguments);
		var Ext = this.getConstructor(o);

		// Setup inheritance
		Ext.prototype = Object.create(this.prototype);
		Ext.prototype.constructor = Ext;
		// don't override .name if used differently
		if (this.prototype.name === lowerCaseFirstChar(this.name))
			Ext.prototype.name = lowerCaseFirstChar(Ext.name);

		// Set all arguments to the new prototype
		Ext.prototype.set.apply(Ext.prototype, arguments);

		// now we can handle the .log config, mocking the original `o` with `opts`
		if (is.def(opts.log))
			Ext.prototype.__config_log(opts);

		return Ext;
	}
});



Mod.prototype.log = new Logger(false).log;