var Mfn = require("mfn42/v4");
var is = require("util42").is;

var Set2 = module.exports = Mfn.extend({
	name: "Set2",
	log: true,
	instantiate: function(){
		if (this.set)
			this.set.apply(this, arguments);
		else
			this.assign.apply(this, arguments);
	},
	exec: function(mod){
		for (var i = 1; i < arguments.length; i++){
			this.arg(mod, arguments[i]); // keep mod as first arg
		}
		return mod; // important
	},
	arg: function(mod, arg){
		if (is.pojo(arg))
			this.obj(mod, arg);
		else
			this.other(mod, arg);
	},
	other: function(mod, arg){
		this.value.call(mod, arg);
	},
	obj: function(mod, obj){
		for (var i in obj){
			this.prop(mod, i, obj[i]);
		}
		return mod; // used in .objProp()
	},
	prop: function(mod, prop, value){
		// this should work for pojos...so no funny business

		var currentValue = mod[prop],
			hasOwn = mod.hasOwnProperty(prop);
				// this order is important, because we touch the value before checking hasOwn, it triggers auto cloning

		if (is.fn(mod["set_" + prop])) {
			mod["set_" + prop](value);
			
		} else if (is.simple(currentValue)){
			this.assignProp(mod, prop, value);

		// recursively set
		} else if (currentValue.set){
			this.propWithSet(currentValue, value, mod, prop);

		// Mfn is one use case for having .clone w/o .set
		// .set({ someMfn: ... }) ALWAYS clones, which is desirable to protect prototype chain??
		// it doesn't need to clone if it has own...?
			// if we plan on reusing the same reference on multiple objects, which i've sometimes done (like, prototype.set = set, and Class.set = set..), then its possible that it would haveOwn but that would be a shared reference...
			// Ahh - mfn w/o .set will hit this...
			// Adding .set w/ .set.sub is probably the best way
		} else if (currentValue.clone && (!hasOwn || currentValue.mfn)){
			this.assignProp(mod, prop, currentValue.clone(value));

		} else if (is.fn(currentValue)) {
			this.fnProp(mod, prop, value);

		} else if (is.obj(currentValue)){
			this.objProp(mod, prop, value);

		} else if (is.arr(currentValue)){
			this.arrProp(mod, prop, value);

		} else {
			console.info("what are you?");
			this.assignProp(mod, prop, value);
		}
	},
	propWithSet: function(currentValue, value, mod, prop){
		if (currentValue.set.sub){
			currentValue.set.sub(currentValue, value, mod, prop);
		} else if (currentValue.set.mfn)
			currentValue.set.mfn.sub(currentValue, value, mod, prop);
		else
			currentValue.set(value); // doesn't allow override, unless I go back to re-assigning the return from this... which isn't terrible, especially if you might want to revert to a normal fn...
	},
	arrProp: function(mod, prop, value){
		if (!mod.hasOwnProperty(prop)){
			console.warn("always wear protection");
		}

		// maybe [] + [] ==> assign?
		// [] + [[]] ==> push
		// [] + [[ [] ]] ==> push an array
		// i suppose you can always { assign: { arr: [] } } to override...

		var current = mod[prop];
		if (is.arr(value)){
			current.push.apply(current, value);
		} else if (is.pojo(value)){
			// i think this should allow { push: ..., unshift: ..., etc }
			// unshift: [] to call (apply) without args?
			this.obj(current, value);
		} else {
			current.push(value);
		}
	},
	assignProp: function(mod, prop, value){
		if (mod.assign && mod.assign.prop){
			this.log(this.log.label(mod)+ ".assign.prop()");
			mod.assign.prop(mod, prop, value);
		} else {
			this.log(this.log.label(mod)+ "." + prop + " =", value);
			mod[prop] = value;
		}
	},
	added: function(sub, parent, name){}, // ORP
	// this is useful for resorting back to assign within a set({})
	fnProp: function(mod, prop, value){
		if (is.fn(value)){
			this.assignProp(mod, prop, value);
		} else {
			if (is.arr(value))
				mod[prop].apply(mod, value);
			else
				mod[prop].call(mod, value);
		}
	},
	// for obj props without .set... (usually a pojo, but not necessarily)
	objProp: function(mod, prop, value){
		if (is.obj(value)){
			if (mod.hasOwnProperty(prop))
				this.obj(mod[prop], value)
			else
				this.assignProp(mod, prop, this.obj(Object.create(mod[prop]), value));
		} else {
			console.warn("whoops");
		}
	},
	value: function(value){
		// ctx here will be the mod
		// a slight deviation from the norm, but I think it makes sense
		console.warn("not sure how to set this");
	},
	// consider extending Set, and overriding this method for Class.set, in order to prevent extra logic every time for non classes
	override: function(sub, value, parent, name){
		if (is.Class(sub) && is.Class(value)){
			parent.set.mfn.assignProp(parent, name, value);
			return true;
		} else if (value instanceof sub.constructor){
			parent.set.mfn.assignProp(parent, name, value);
			return true;
		} else {
			return false;
		}
	},
	// can be overridden for Classes, and other situations
	protect: function(sub, value, parent, name){
		if (is.Class(sub)){
		
			if (parent.hasOwnProperty(name))
				sub.prototype.set(value);
			else
				parent.set.mfn.assignProp(parent, name, sub.extend(value));

			return true;

		} else if (!parent.hasOwnProperty(name) && sub.clone){
		
			if (sub.parent !== parent.proto) 
				console.warn("Consider only auto cloning direct children", parent.name, name);
		
			parent.set.mfn.assignProp(parent, name, sub.clone(value));
			
			return true;
		
		} else {
			return false;
		}
	},
	// parent[name] === sub, incoming value
	sub: function(sub, value, parent, name){
		if (this.override(sub, value, parent, name))
			return;

		else if (this.protect(sub, value, parent, name))
			return;

		else
			this.arg(sub, value);
	}
});

var set = Set2({
	/*
	Mod({
		set: function(value){
			//...
		}
	})
	*/
	other: function(setMfn, arg){
		if (is.fn(arg)){
			setMfn.value = arg;
		} else {
			this.value.call(setMfn, arg);
		}
	}
}).fn;

Set2.set = set;
Set2.prototype.set = set;