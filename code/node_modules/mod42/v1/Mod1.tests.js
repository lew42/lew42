var test = require("test42");
var view = require("view42");
var assert = test.assert;
var util = require("util42");
var is = util.is;

var Mod = require("./Mod1");

test("basic", function(){
	test.assertClass(Mod, false);
});

test("pojo", function(){
	var Mod2 = Mod.extend({
		shared: {},
		willClone: {}
	});

	var mod = new Mod2({
		willClone: {
			prop: 1
		}
	});

	assert(mod.shared === Mod2.prototype.shared);
	assert(mod.willClone !== Mod2.prototype.willClone);
	assert(Object.keys(Mod2.prototype.willClone).length === 0);
	assert(mod.willClone.prop === 1);
});

test("pojo.subPojo", function(){
	var Mod2 = Mod.extend({
		pojo: {
			subPojo: {}
		}
	});

	var mod1 = new Mod2({
		pojo: { // only pojo (not subPojo) gets cloned
			prop: 1
		}
	});

	assert(mod1.pojo !== Mod2.prototype.pojo);
	assert(mod1.pojo.subPojo === Mod2.prototype.pojo.subPojo);

	var mod2 = new Mod2({
		pojo: {
			subPojo: {
				prop: 1
			}
		}
	});
	assert(mod2.pojo !== Mod2.prototype.pojo);
	assert(mod2.pojo.subPojo !== Mod2.prototype.pojo.subPojo);


});

test("sub", function(){
	var Mod2 = Mod.extend({
		shared: new Mod(),
		willClone: new Mod()
	});

	var mod = new Mod2({
		willClone: {
			prop: 1
		}
	});

	assert(mod.shared === Mod2.prototype.shared);
	assert(mod.willClone !== Mod2.prototype.willClone);
	assert(Object.keys(Mod2.prototype.willClone).length === 0);
	assert(mod.willClone.prop === 1);
});

test("basic set", function(){
	var subPojo = {
		keep: 234,
		override: 345
	};
	var Mod2 = Mod.extend({
		constructor: function Mod2(){
			this.instantiate.apply(this, arguments);
		},
		prop: 123,
		set_something: function(){
			console.log("set_something", arguments);
		},
		sub: new Mod({
			set_subProp: function(){
				console.log("set_subProp", arguments);
			},
			subPojo: subPojo,
			assign: {
				assign: false
			},

		}),
		set_: function(value){
			console.log("set_", value);
		}
	});

	var mod = new Mod2({
		newProp: 456,
		something: "should call set_something",
		sub: {
			subProp: "wee",
			subPojo: {
				uh: "oh"
			}
		}
	}, "value?", 123);

	assert(mod.sub !== Mod2.prototype.sub);
	assert(mod.sub.subPojo === Mod2.prototype.sub.subPojo);
	assert(mod.sub.assign === false);
});


// test("assign", function(){
// 	var Sub = Mod.extend({
// 		name: "Sub",
// 		assignedTo: function(parent, name){
// 			// console.log('assignedTo', parent, name);
// 			this.name = name;
// 			this.parent = parent;
// 		}
// 	});

// 	var parent = new Mod({
// 		name: "parent",
// 		child: Sub()
// 	});

// 	assert(parent.child instanceof Sub);
// 	assert(parent.child.parent === parent);
// 	assert(parent.child.name === "child");
// });

// test("assignedTo", function(){
// 	var mod = new Mod({
// 		sub: Mod.sub()
// 	});

// 	assert(mod.sub.parent === mod);
// 	assert(mod.sub instanceof Mod);
// 	assert(mod.sub.name === "sub");
// });