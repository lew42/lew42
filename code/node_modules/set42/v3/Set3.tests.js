var test = require("test42");
var view = require("view42");
var assert = test.assert;
var util = require("util42");
var is = util.is;

var Set = require("./Set3");
var Mod = require("mod42/v1");

test("hmm", function(){
	var set = Set().wrapper;
	// console.log(set);
	var Mod2 = Mod.extend({
		name: "Mod2",
		assign: {
			set: set
		}
	});
	assert(Mod2.prototype.set === set);
	var mod = Mod2({
		log: {
			log: true,
			// method: {
			// 	set: {
			// 		// expand: false
			// 	}
			// }
		},
		// set: {
		// 	// log: false
		// },
		prop: 123,
		method: function(){
			console.log("inside .method()");
		}
	});

	mod.log("huh?");
	assert(mod.prop === 123);

	mod.set({
		and: "now?"
	});


	mod.method(
		function(){
		console.log("If this function has any body to it, for whatever reason, the console inlines the entire function contents...");
	});

	mod.method({ orIfThisObjectHasReally: "Long keys and values", iThinkItWillJust: 1238123818238, keepOnGoingAndGoing: "until when?"})
});

// test("its just like assign", function(){
// 	var set = Set().wrapper;

// 	console.log(set);

// 	var obj = Mod({
// 		set: Set().wrapper
// 	});

// 	obj.set({
// 		prop: 1,
// 		method: function(){}
// 	});

// 	assert(obj.prop === 1);
// 	assert(is.fn(obj.method));

// 	obj.set({
// 		prop: 2,
// 		method: function(value){
// 			this.check = value;
// 		}
// 	});
	
// 	assert(obj.prop === 2);

// 	test("but does some cool stuff", function(){
// 		assert(is.undef(obj.check));

// 		obj.set({
// 			method: 123
// 		});

// 		assert(obj.check === 123);

// 		// This will only work if obj has .assign... duh
// 		// obj.set({
// 		// 	assign: {
// 		// 		method: 123
// 		// 	}
// 		// });

// 		// assert(obj.method === 123);
// 	});
// });


// var shortFormTest = function(subject){
// 	var check = {};
	
// 	subject.set({
// 		set: function(value){
// 			check.itWasCalled = true;
// 			assert(this === subject);
// 			assert(value === "yo");
// 		}
// 	});

// 	subject.set("yo");

// 	assert(check.itWasCalled === true);
// };

// test("short form for set.value", function(){
// 	var set = Set().fn;
// 	console.dir(set);
// 	// this should be moved into another version
// 	var ModX = Base.extend({
// 		name: "ModX",
// 		log: false
// 	});

// 	// new Mod.Method(set).assignedTo(ModX.prototype, "set");

// 	assert(set === ModX.prototype.set.fn);

// 	var mod = ModX();
	
// 	shortFormTest(mod);
// });

// test("short form for mod.set.value", function(){
// 	var mod = Mod();
// 	shortFormTest(mod);
// 	assert(mod.set !== Mod.prototype.set);
// 	assert(mod.set.mfn !== Mod.prototype.set.mfn);
// });