var Mfn = require("mfn42/v4");
var track = require("track42");

var ExtendMfn = module.exports = Mfn.extend({
	name: "ExtendMfn3",
	exec: function(Base, o){
		var Ext, args = arguments;
		Ext = Base.createConstructor(this.getName(Base, o));
		this.setupConstructor(Ext, Base);
		this.createPrototype(Ext, Base);
		this.instantiatePrototype(Ext, Base);
		this.setupPrototype(Ext, Base, [].slice.call(args, 1));
		this.then && this.then(Ext, Base); // ORP
		return Ext;
	},
	getName: function(Base, o){
		var name;
		if (o && o.name){
			name = o.name;
			delete o.name; // otherwise it will be assigned to prototype..
			return name;
		} else {
			return Base.name + "Ext";
		}
	},
	setupConstructor: function(Ext, Base){
		Ext.assign = Base.assign;
		Ext.assign(Base);
			track(Ext);
			Ext.base = Base;
	},
	createPrototype: function(Ext, Base){
		Ext.prototype = Object.create(Base.prototype);
			track(Ext.prototype);
			Ext.prototype.assign({
				constructor: Ext,
				name: Ext.name[0].toLowerCase() + Ext.name.substring(1),
				// base: Base.prototype,
				// proto: Ext.prototype
			});
	},
	instantiatePrototype: function(Ext, Base){}, //ORP
	setupPrototype: function(Ext, Base, args){
		Ext.prototype.set.apply(Ext.prototype, args);
		// if (Ext.prototype.protect)
		// 	Ext.prototype.protect(Base.prototype);
	}
});