var test = require("test42");
var view = require("view42");
var assert = test.assert;
var util = require("util42");
var is = util.is;

var Mod6 = require("./");

test("basic", function(){
	var mod = Mod6({
		one: 1,
		two: true,
		three: 3,
		four: function(){},
		five: {},
		six: []
	});
});

/*

Auto wrap all props and methods.
The Prop.getter could be used for methods, to control whether the wrapped, or unwrapped, is returned.

I need customized views.
- clone the views?
- instantiate .View?

View per Prop
How do we customize the Prop instance as the props are being set?

Prop.make(value) ---> returns a Prop of the proper prop.

Can we use a custom Prop() wrapper?
Method extends Prop?  Yerp..

Could a Mod extend Prop?  Yerp...

Can we use similar Prop views for View.inspect, and PropView?


Rendering on demand - we don't need to auto render every object, until its expanded...

And controlling expand/collapse...

There's a lot to manage here.  I'm likely going to need some state/storage to handle it.  

Keep pushing forward...




*/