var View = require("view42/v8");
var util = require("util42");
var is = util.is;

var Page2 = module.exports = View.extend({
	name: "Page",
	autoRender: false,
	autoCapture: false,
	instantiate: function(){
		this.pages = [];
		View.prototype.instantiate.apply(this, arguments);
		this.addClass(this.name);
		return this;
	},
	initialize: function(){
		// if (this.autoCapture){
		// 	console.error("bro, do you even happen?")
		// 	this.getCaptured();
		// }
		this.init();
	},
	set_route: function(route){
		if (is.str(route)){
			route = this.parent.route.add(route);
		}
		this.route = route;
		route.page = this;

		if (this.route.part.length){
			this.set_name(this.route.part);
		}

		route.then(function then(){
			this.activate(true);
		}.bind(this));
	},
	addSubPage: function(route, page){
		page.parent = this;
		page.set_route(route);
		this.addPage(page);
		return page;
	},
	getParentPageFromRoute: function(){
		// console.group("getParentPageFromRoute", this.name);
		var route = this.route.parent;
		while (route){
			if (route === this.app.route){
				// we don't want to parent to the homepage, so switch this to the app itself...
				// console.log("parent: app");
				this.app.addPage(this);
				route = false;
				break;
			}
			if (route.page){
				// console.log("parent", route.page.name);
				route.page.addPage(this);
				route = false;
				break;
			} else {
				route = route.parent;
			}
		}
		// console.groupEnd();
		return false;
	},
	activate: function(rematch){
		if (this !== this.app.activePage){
			if (this.app.activePage !== this.app)
				this.app.activePage.deactivate().then(this.activateSelf.bind(this, rematch));
			else
				this.activateSelf(rematch);
		}
	},
	push: function(){
		this.route && this.route.activate();
	},
	in: function(){
		return this.$el.fadeIn().promise();
	},
	activateSelf: function(rematch){
		this.app.mainer.captureFn(function(){
			this.hide();
			this.render();
		}.bind(this));
		
		// rematch is true if this.activate() was triggered via the route
		// if there's a lazily defined sub page, activate it instead
		if (rematch && this.route.rematch())
			return false

		// otherwise, continue activating this one
		this.app.activePage = this;
		this.push(); // this has to come after the above line
		return this.in();
	},
	out: function(){
		return this.$el.fadeOut().promise();
	},
	deactivate: function(){
		return this.out();
	},
	addPage: function(page){
		if (!(page instanceof Page2))
			console.warn("not a page");

		page.parent = this;
		page.app = this.app;

		this.pages.push(page);

		if (!this[page.name])
			this[page.name] = page;
	},
	jsName: function(name){
		var sname = util.sanitizeString(name);
		return sname.replace("-", "_");
	},
	set_name: function(name){
		this.name = this.jsName(name);
	},
	logger: function(){
		console.group(this.name);
		console.log("parent", this.parent && this.parent.name);
		for (var i = 0; i < this.pages.length; i++){
			this.pages[i].logger();
		}
		console.groupEnd();
	}
});