var Base2 = require("base42/v2");
var is = require("util42/is");

var noop = function(){};

var ConsoleLogger = Base2.extend({
	name: "ConsoleLogger1",
	methods: ["log", "group", "debug", "trace", "error", "warn", "info"],
	initialize: function(){
		this.init_logger();
	},
	init_logger: function(){}
});

var EnabledConsoleLogger = ConsoleLogger.extend({
	name: "EnabledConsoleLogger1",
	init_logger: function(){
		this.logger = console.log.bind(console);
		this.logger.type = "active";
		this.logger.active = true;
		this.logger.logger = this;

		this.methods.forEach(function(method){
			this.logger[method] = console[method].bind(console);
		}.bind(this));

		this.logger.groupc = console.groupCollapsed.bind(console);
		this.logger.end = console.groupEnd.bind(console);

		this.logger.close = function(fn, ctx){
			fn.call(ctx);
			this.end();
		};
	}
});

var DisabledConsoleLogger = ConsoleLogger.extend({
	name: "DisabledConsoleLogger1",
	init_logger: function(){
		this.logger = noop;
		this.logger.type = "noop";
		this.logger.active = false;
		this.logger.logger = this;
		this.methods.forEach(function(method){
			this.logger[method] = noop;
		}.bind(this));

		this.logger.groupc = noop;
		this.logger.end = noop;
		this.logger.close = function(fn, ctx){
			fn.call(ctx);
		};
	}
});

var Logger = module.exports = Base2.extend({
	name: "Logger2",
	set: function(value){
		// true/false
		this.state = value;
	},
	initialize: function(){
		this.active = new EnabledConsoleLogger().logger; // move these to the literal?
		this.noop = new DisabledConsoleLogger().logger;
		
		this.active.logger = this;
		this.noop.logger = this;

		this.active.on = this.active;
		this.active.off = this.noop;

		this.noop.on = this.active;
		this.noop.off = this.noop;

		this.active.label = function(mod){
			return mod.name + "{" + mod.constructor.name + "-" + mod.id + "}";
		};

		this.noop.label = noop;
	},
	setter: function(value){
		// .setter fn gets assigned to the parent, as .set_log()
		// `this` is the parent, NOT the Logger instance
		if (is.bool(value)){
			if (value){
				// enable
				// I think I have to hard-code the property name here, unless I want to create a scope-based binding
				this.log = this.log.on;
			} else {
				// disable
				this.log = this.log.off;
			}
		} else if (is.fn(value) && value.logger && value.logger instanceof ConsoleLogger){
			this.log = value;
		}
	},
	assignTo: function(parent, name){
		if (name !== "log")
			console.error("Logger should be installed at .log.");
		this.name = name; // should be "log"
		parent[name] = this.state ? this.active : this.noop;
		parent["set_"+name] = this.setter;
	}
});
