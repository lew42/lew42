var Page1 = require("page42/Page1");
var View = require("view42");
var Test = require("test42");

var Router = require("route42/Route6");

var $ = require("jquery");

// var AppView = require("./AppView");

var App = module.exports = Page1.extend({
	name: "App",
	// View: AppView,
	instantiate: function(){
		this.route = Router();
		this.root = this;
		this.activeNode = this;

		Page1.prototype.instantiate.apply(this, arguments);
	},
	initialize: function(){
		this.init();
		this.render();
		this.route.matchAndActivate();

		$(function(){
			this.view.prependTo("body");

			setTimeout(function(){
				$(window).resize();
			}, 0);

		}.bind(this));
	},
	set_home: function(homepage){
		homepage.set_route(this.route);
		this.add(homepage);
		this.home = homepage;
	},
	set_activeNode: function(node){
		this.activeNode = node;
	},
	render: function(){
		// this.view = new this.View({
		// 	app: this
		// }).prependTo("body");
	},
	loadPages: function(req){
		var pageKeys = req.keys(),
			routeString, routeParts, route, pages = [], page;

		for (var i = 0; i < pageKeys.length; i++){
			routeString = pageKeys[i].replace("./", "").replace(".page.js", "");
			routeParts = routeString.split("/");
			if (routeParts[routeParts.length - 1] === routeParts[routeParts.length - 2])
				routeParts.pop();

			routeString = routeParts.join("/");

			// require the page
			page = req(pageKeys[i]);

			if (page instanceof Page1){
				page.app = page.root = this; // needed for getParentPageFromRoute()
				pages.push(page);
				route = this.route.add(routeString);
				page.set_route(route);
			}
		}

		for (var i = 0; i < pages.length; i++){
			pages[i].getParentPageFromRoute();
		}
	},
	loadTests: function(req){
		// return false;
		var testRoute = this.route.add("test");

		var keys = req.keys(), key, path, parts, route, routes = [], page, pages = [];

		var testPage = Page1({
			route: testRoute
		});

		this.add(testPage);

		for (var i = 0; i < keys.length; i++){
			key = keys[i];
			path = key.replace("./", "").replace(".tests.js", "");
			parts = path.split("/");

			if (parts[parts.length - 1] === parts[parts.length - 2])
				parts.pop();

			path = parts.join("/");

			route = testRoute.add(path);

			page = Page1({
				app: this,
				root: this,
				route: route,
				key: key,
				content: function(){
					// debugger;
					View.h1(this.name);
					View("parent: " + this.parent.name);
					Test.route = this.route;
					this.route.remainder = this.route.reminder || [];
					req(this.key);
				}
			});

			route.then(function(){
				this.page.activate();
			});

			routes.push(route);
			pages.push(page);
		}

		for (var i = 0; i < pages.length; i++){
			pages[i].getParentPageFromRoute();
		}

		// var app = this;
		testPage.content = function(){
			View.h1("Tests/");
			// console.log(this.View);
			this.route.each(function(route){
				// console.log(route);
				this.app.View.Route({
					route: route
				});
			}.bind(this))
		};

		// when testPage is activated, we need to list all tests
		// 
	}
});