var Base = require("base42/v5");
var is = require("util42").is;
var Set = require("set42/v2");
var Extend = require("extend42/v3");

var Logger = require("log42/v2");

var logger = Logger();
/* Already this module has a massive footprint.  */



var Mod = module.exports = Base.extend({
	name:"Mod5",
	
	autoAdopt: false,

	set: Set({
		assignTo: function(mod, parent, name){
			parent[name] = mod;
			this.adoption(mod, parent, name);
		},
		adoption: function(mod, parent, name){
			if (mod.autoAdopt && !mod.hasOwnProperty("parent")){
				mod.parent = parent;
				mod.name = name;
				mod.autoInitialize && mod.initialize();
				return true;
			}
			return false;
		}
	}).wrapper,

	autoInitialize: true,
	instantiate: function(){
		// !warning!  If any references are made to `this` before the proxy is made, those reference will fail a proxy === this check.  That would only apply in certain circumstances, but its the one pitfall of these Proxies....
		this.set.apply(this, arguments);
		this.autoInitialize && !this.autoAdopt && this.initialize();
			// don't rely on args for initialize - because in the case of adoption, we don't have them.. you could assign them for later, if necessary... { args: ... }
	},
	initialize: function(){}
}).assign({
	log: logger.noop,
	set: Set({
		sub: function(Class, value, parent, name){
			if (!is.Class(Class))
				console.error("whoops..");

			if (is.Class(value)){
				// override
				parent.set.mfn.assignProp(parent, name, value);
			} else if (parent.hasOwnProperty(name)){
				// modify the prototype?  could still be dangerous..
				Class.prototype.set(value);
			} else {
				// protection via .extend()
				parent.set.mfn.assignProp(parent, name, Class.extend(value));
			}
		}
	}).wrapper,
	extend: Extend().wrapper,
	x: function(){
		var args = [].slice.call(arguments);
		args.push({ autoInitialize: false });
		return this.apply(null, args);
	},
	sub: function(){
		var args = [].slice.call(arguments);
		args.push({ autoAdopt: true });
		return this.apply(null, args);
	}
});

Mod.prototype.set({
	log: {
		set: {
			ret: false,
			expand: true
		}
	}
})