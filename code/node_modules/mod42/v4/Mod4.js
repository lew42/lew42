var Mod2 = require("../v2");
var is = require("util42").is;

var definer = require("mixin42/define");
var cloner = require("mixin42/cloner");


var Mod4 = module.exports = Mod2.extend({ name: "Mod4" },
	definer, cloner, {
	getter: function(ctx){
		var clone = this.protect(ctx);
		if (clone)
			return clone;
		else
			return this;
	},
	assignedTo: function(parent, name){
		this.adoption(parent, name);
	},
	adoption: function(parent, name){
		// console.trace("adoption");
		if (this.adopt){ // default is undefined
			if (!this.hasOwnProperty("parent")){
				this.set_parent(parent);
				this.set_name(name);
				this.init_define(parent, name);
				return true;
			}
		}
		return false; // return value is used in View/v7 and v8
			// an alternative would be to have an .adopted() ORP, called if its adopted..
	},
	set_parent: function(parent){
		this.parent = parent;
	},
	set_name: function(name){
		this.name = name;
	}
}).assign({
	sub: function(){
		var args = [].slice.call(arguments);
		return this.apply(null, [{ adopt: true }].concat(args));
	}
});