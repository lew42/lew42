var View = require("./index.js");
var test = require("test42");
var assert = test.assert;
var is = require("util42").is;

var boxes = function(n, o){
	for (var i = 0; i < n; i++){
		View(o);
	}
};

test("one", function(){
	this.view.addClass("wires");
	View(function(){
		this.addClass("grid two");
		boxes(7, {
			filler: "1-2s"
		});
	});

	View(function(){
		this.addClass("grid three pad");
		boxes(12, {
			filler: "1s"
		});
	});

	View(function(){
		this.addClass("grid four space pad");
		boxes(13, {
			filler: "1-2s"
		});
	});
});

test("floats", function(){
	this.view.addClass("wires");
	View(function(){
		this.addClass("f-grid two");
		boxes(7, {
			filler: "1-2s"
		});
	});

	View(function(){
		this.addClass("f-grid three pad");
		boxes(12, {
			filler: "1s"
		});
	});

	View(function(){
		this.addClass("f-grid four space pad");
		boxes(13, {
			filler: "1-2s"
		});
	});
});

var Cols = View.extend(function(){
	this.addClass("two cols");
	this.css("position", "relative");


	if (this.showWidth){
		this.width = View().css({
			position: "absolute",
			bottom: "100%",
			background: "white"
		});
	}
	
	$(window).resize(function(){
		this.width.text(this.$el.width());
		if (this.$el.width() < this.break){
			this.addClass("break");
			this.width && this.width.css("color", "teal");
		} else {
			this.removeClass("break");
			this.width && this.width.css("color", "purple")
		}
	}.bind(this));


	this.contents();
}, {
	contents: function(){},
	break: 300
});

test("double break", function(){
	this.view.addClass("");

	Cols({
		contents: function(){
			// this.width.css("bottom", "120%")
			Cols({
				contents: function(){
					View().filler("2s").css("border", "1px solid black");
					View().filler("2s").css("border", "1px solid black");
					this.css("background", "#ccc")
				}
			});
			Cols({
				contents: function(){
					Cols({
						contents: function(){
							View().filler("2s").css("border", "1px solid black");
							View().filler("2s").css("border", "1px solid black");
							this.css("background", "#ccc")
						}
					});
					Cols({
						contents: function(){
							View().filler("2s").css("border", "1px solid black");
							View().filler("2s").css("border", "1px solid black");
						}
					});
				}
			});
		}
	})
});

test("padded", function(){
	Cols({
		addClass: "pad-a",
		contents: function(){
			this.removeClass("two");
			this.addClass("three pad-children");
			View().filler("2p");
			View().filler("2p");
			View().filler("2p");
		},
		break: 600
	})
});

test("spaced", function(){
	Cols({
		addClass: "space-a",
		contents: function(){
			this.removeClass("two");
			this.addClass("three pad-children flex-grid");
			View.p().filler("1-2s");
			View.p().filler("1-2s");
			View.p().filler("1-2s");
			View.p().filler("1-2s");
			View.p().filler("1-2s");
		},
		break: 600
	})
});


test("varying cols", function(){
	Cols({
		contents: function(){
			// this.width.css("bottom", "120%");

			View().filler("2s").addClass("third");
			Cols({
				contents: function(){
					View().filler("2s")
					View().filler("2s")
				}
			}).addClass("thirds");
		},
		break: 500
	})
});

var Viz = View.extend({
	content: function(){
		this.addClass("viz");
		// this padding will mimic margin?
		// or, just let the inner div's margin make it..
		this.viz.render().addClass("vizzed");
	}
});

var viz = function(view){
	Viz({
		viz: view
	})
};

test("viz", function(){

	var v = View.x({
		css: {
			margin: "1em",
			padding: "1em"
		},
		content: function(){
			View().filler("2s");
		}
	});

	Viz({ viz: v });

	var cols = 	Cols.x({
		contents: function(){
			// this.width.css("bottom", "120%");

			View().filler("2s").addClass("third");
			Cols({
				contents: function(){
					this.addClass("pad");
					Viz({ 
						viz: View.x().filler("1p")
					});
					Viz({
						viz: View.x().filler("1p")
					})
				}
			}).addClass("thirds");
		},
		break: 500
	});

	Viz({ viz: cols })
});