var test = require("test42");
var view = require("view42");
var assert = test.assert;
var util = require("util42");
var is = util.is;

var Mod = require("./Mod5");

test("Class", function(){
	test.assertClass(Mod);
});

test("set", function(){
	var mod = Mod({
		prop: 123
	});

	assert(mod.prop === 123);

	test("resort back to assign", function(){

		var mod = Mod({
			prop: function(){
				console.log(arguments);
			}
		});

		mod.set({
			prop: 123
		});

		assert(is.fn(mod.prop));

		mod.set({
			assign: {
				prop: 123
			}
		});

		assert(mod.prop === 123);

	});

	test("modify set", function(){
		var mod = Mod({
			set: {
				assignTo: function(mod, parent, name){
					this.adoption(mod, parent, name);
				},
				adoption: function(mod, parent, name){
					if (!mod.hasOwnProperty('parent')){
						mod.parent = parent;
						mod.name = name;
					}
				}
			}
		});

		var parent = Mod({
			sub: mod
		});

		assert(mod.name === "sub");
		assert(mod.parent === parent);
	});

	test("shorthand", function(){
		var mod = Mod({
			set: function(value){
				this.value = value;
			}
		});

		var parent = Mod({
			sub: mod
		});

		parent.set({
			sub: "someValue"
		});

		assert(mod.value === "someValue");

		mod.set(123)
		assert(mod.value === 123);

		test("extend with shorthand", function(){
			var Mod2 = Mod.extend({
				set: function(value){
					this.value = value;
				}
			});

			var mod = Mod2("yo");

			assert(mod.value === "yo");
		});
	});
});

test("autoInitialize", function(){
	var check, mod = Mod({
		initialize: function(){
			check = true;
		}
	});

	assert(check === true);
});

test("adoption", function(){
	var check = false, mod = Mod.sub({
		initialize: function(){
			check = this.parent;
		}
	});

	assert(check === false);

	var parent = Mod({
		mySubMod: mod
	});

	assert(check === parent);
	assert(mod.name === "mySubMod");
});

test("proxy Class", function(){
	var mod = Mod({
		log: true,
		fn: function(){
			console.log("fn");
		},
		Class: Mod.extend({
			debug: true,
			name: "Class"
		})
	});

	mod.fn();

	var cls = new mod.Class();
	var cls = mod.Class();
});

test("proxy console log", function(){
	var log = new Proxy(console.log, {
		apply: function(fn, ctx, args){
			// return fn.apply(ctx, args);
			return Reflect.apply(fn, ctx, args);
		}
	});

	log("yo");
});