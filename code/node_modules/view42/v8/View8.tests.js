var test = require("test42");
var view = require("view42");
var assert = test.assert;
var util = require("util42");
var is = util.is;

var View = require("./View8");

test("basic", function(){
	var v = View("hi");
	assert(v instanceof View);
});

test("one", function(){
	var v1 = View("hello", "world").addClass("v1");
	v1.clone().addClass("v1-clone");
});

test("two", function(){
	var v2 = View(View("hello"), View("world")).addClass("v2");
	v2.clone().addClass("v2-clone");
});

test("three", function(){
	var v3 = View({
		one: View("onezy"),
		two: View("twozy")
	}).addClass("v3");

	var v3c = v3.clone().addClass("v3-clone");

	v3c.one.addClass("v3-one-clone");

});

test("adopt then render", function(){
	View({
		prop: 5,
		sub: View.sub(function(){
			this.append("The prop is " + this.parent.prop);
		})
	})
});

test("extending", function(){
	var MyView = View.extend({
		prop: 5,
		sub: View.sub(function(){
			this.append("The prop is " + this.parent.prop);
		})
	});

	MyView();
	MyView({
		prop: 10,
		sub: {
			addClass: "yo"
		}
	})
});

test("overrides", function(){
	var MyView = View.extend({
		name: "MyView",
		sub: View("This is a .sub").addClass("keep-me")
	});

	/*
	The sub is getting auto-cloned somewhere, which auto-renders it, but its not being captured properly?

	Maybe it is being re-captured.. but its not being re-rendered AFTER its initial auto-clone-->render.  In other words, it renders before the below string is appended, and then its not getting re-rendered.

	Maybe init shouldn't auto-render?  We can auto-capture, and maybe auto-render after capture/adoption?  Hmm...
	*/
	MyView({
		sub: ["appended"]
	})

});

test("logger view, wtf", function(){
	var LoggerView = View.extend({
		name: "LoggerView",
		// init: function(){
		// 	console.dir(this.logr);
		// 	this.render();
		// },
		header: View.sub({
			icon: View.Icon.sub("plane"), // promote these as refs to the parent view?
			label: View.sub(function(){
				// console.log(this);
				// console.log(this.parent.parent.logr.id);
				this.append("label");
			}),
			btn: View.Icon.sub("beer")
		}),
		// body: View.sub({
		// 	autoAppend: false,
		// 	content: function(){
		// 		this.parent.logr.args.forEach(function(arg){
		// 			View(arg.toString());
		// 		});
		// 		this.parent.logr.logs.forEach(function(log){
		// 			log.render();
		// 		});
		// 	}
		// })
	});

	LoggerView();

});