var Mod = require("mod42/v2");
var is = require("util42").is;
var track = require("track42");
var View = require("view42/v8");
var Q = require("q42");

var define = require("mixin42/define");
var cloner = require("mixin42/cloner");

var Sfn = Mod.extend({ name: "Sfn" }, 
	/* mixins */ define, cloner, 
{
	getter: function(ctx){
		var clone = this.protect(ctx);
		return clone ? clone.fn : this.fn;
	},
	initialize: function(){
		this.init_fn();
		this.init();
	},
	init_fn: function(){
		var self = this;
		this.fn = function(){
			if (this !== self.mod)
				console.error("Uh oh");
			return self.main.apply(self, arguments);
		};

		this.fn.sfn = this;
		
		this.fn.clone = function(){
			return this.sfn.clone.apply(this.sfn, arguments);
		};

		this.init_fn_setup();
	},
	init_fn_setup: function(){}, // ORP
	assignedTo: function(mod, name){
		// console.log('sfn.assignedTo', mod);
		if (!this.hasOwnProperty("mod") && this.adopt !== false){
			// console.log("defining sfn");
			this.mod = mod;
			this.name = name;
			this.init_define(this.mod, this.name);
		}
	},
	main: function(){}
});



// var Log = Mod.extend({
// 	name: "Log",
// 	initialize: function(){
// 		this.init_time();
// 	},
// 	init_time: function(){
// 		this.time = Date.now();
// 		console.log.apply(console, this.args);
// 	},
// 	render: function(){
// 		View(function(){
// 			View(this.time);
// 			for (var i = 0; i < this.args.length; i++){
// 				if (is.def(this.args[i]))
// 					View(this.args[i].toString());
// 				else
// 					View("undefined");
// 			}
// 		}.bind(this));
// 	}
// });


// var CaptorMixin = require("captor42"); // mixin

var LoggerView = View.extend({
	name: "LoggerView",
	collapsed: true,
	header: View.sub({
		icon: View.Icon.sub("plane"), // promote these as refs to the parent view?
		label: View.sub(function(){
			console.log(this);
			console.log(this.parent.parent.logr.id);
			this.append(this.parent.parent.logr.label);
		}),
		btn: View.Icon.sub("beer")
	}),
	body: View.sub({
		autoAppend: false,
		hide: [],
		content: function(){
			this.parent.logr.args && [].slice.call(this.parent.logr.args).forEach(function(arg){
				View(arg.toString());
			});
			this.parent.logr.logs.forEach(function(log){
				console.log("sub log", log);
				log.render();
			});
		}
	}),
	behaviors: function(){
		this.header.click(this.myToggle.bind(this));
	},
	myToggle: function(){
		this.body.render().appendTo(this.$el);
		if (this.collapsed){
			this.removeClass("collapsed");
			this.collapsed = false;
			this.body.slideDown();
		} else {
			this.collapsed = true;
			this.addClass("collapsed");
			this.body.slideUp()
		}
	}
})



var captor; // this is the current captor

var Logger = module.exports = Sfn.extend({
	name: "Logger1",
	logs: [],
	initialize: function(){
		this.logs = [];
		this.previousCaptors = [];
		this.added = new Q();
		this.init_fn();
		this.init_time();
		this.init();
	},
	init_time: function(){
		this.time = Date.now();
		// console.log.apply(console, this.args);
		var name = this.mod ? this.mod.name : "log";
		this.label = name + " " + this.time;

		console.log("label", this.label, this.args);

	},
	init_fn_setup: function(){
		this.fn.custom = this.custom.bind(this);
		this.fn.logger = this;
		this.fn.render = this.render.bind(this);
	},
	render: function(){
		// console.log("logr.render()", this.id)
		new LoggerView({
			logr: this
		});
	},
	render2: function(){
		/* We'll want to render as many logs as desired.  The views and even logs could be decoupled from the mod.  When we have logging turned on, there will be an admin panel, and we'll render the object's debug view into that panel.  The object's debug view will have more meta info about the object, and its default tab will be the log. */
		var view = View(function(){
			var name;
			if (this.mod && this.mod.name)
				name = this.mod.name + ".log";
			else
				name = "?.log";
			View(name + " " + this.time).addClass("logr-name");
			if (this.args && this.args.length){
				for (var i = 0; i < this.args.length; i++){
					if (is.def(this.args[i]))
						View(this.args[i].toString());
					else
						View("undefined");
				}
			}
			for (var i = 0; i < this.logs.length; i++){
				this.logs[i].render();
			}
		}.bind(this)).addClass("logr");

		// var view2 = View.BarBox({
		// 	name: this.mod ? this.mod.name : "?.log",
		// 	logger: this,
		// 	bar: View.Item({
		// 		icon: "beer"
		// 	}),
		// 	box: function(){
		// 		var logger = this.parent.logger;
		// 		console.log("box", logger);
		// 	}
		// });

		this.added.then(function(log){
			view.capture(function(){
				log.render();
			});
		});
	},
	custom: function(){
		console.group("Logger.custom()");
		console.log("this", this);
		console.log("this.mod", this.mod);
		console.groupEnd();
	},
	log: function(){

	},
	add: function(log){
		this.logs.push(log);
		// console.log("logs", this.logs);
		this.added.exec(log);
	},
	getCaptured: function(){
		if (captor){
			captor.add(this);
		}
	},
	becomeCaptor: function(){
		this.previousCaptors.push(captor);
		captor = this;
	},
	restoreCaptor: function(){
		captor = this.previousCaptors.pop();
	},
	main: function(){
		this.add(new this.constructor({
			args: arguments,
			adopt: false
		}))
	}
});