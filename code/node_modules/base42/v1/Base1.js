var assign = require("../assign/assign1");
var createConstructor = require("../createConstructor/simple");

var Base = createConstructor();
Base.assign = assign;
Base.createConstructor = createConstructor;
Base.getConstructor = function(o){
	var Ext; // return me

	if (!o){
		Ext = this.createConstructor(o);
	} else if (o.createConstructor){
		Ext = o.createConstructor.call(this, o);
		Ext.createConstructor = o.createConstructor;
		delete o.createConstructor;
	} else if (o.hasOwnProperty("constructor")){
		Ext = o.constructor;
		delete o.constructor;
	} else {
		Ext = this.createConstructor(o);
	}

	return Ext;
};

Base.extend = function(o){
	var Ext = this.getConstructor(o);
	Ext.assign = this.assign;
	// Transfer all iterable properties
	Ext.assign(this);
	Ext.base = this;

	// Setup inheritance
	Ext.prototype = Object.create(this.prototype);
	Ext.prototype.constructor = Ext;
	Ext.prototype.name = Ext.name[0].toLowerCase() + Ext.name.substring(1);

	// Assign all arguments to the new prototype
	Ext.prototype.assign.apply(Ext.prototype, arguments);

	return Ext;
};

Base.prototype.assign = assign;
Base.prototype.instantiate = function(){};

module.exports = Base;