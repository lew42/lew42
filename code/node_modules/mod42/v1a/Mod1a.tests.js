var test = require("test42");
var view = require("view42");
var assert = test.assert;
var util = require("util42");
var is = util.is;

var Mod = require("./Mod1a");

test("basic", function(){
	test.assertClass(Mod, false);
});

test("pojo", function(){
	var Mod2 = Mod.extend({
		shared: {},
		willClone: {}
	});

	var mod = new Mod2({
		willClone: {
			prop: 1
		}
	});

	assert(mod.shared === Mod2.prototype.shared);
	assert(mod.willClone !== Mod2.prototype.willClone);
	assert(Object.keys(Mod2.prototype.willClone).length === 0);
	assert(mod.willClone.prop === 1);
});

test("pojo.subPojo", function(){
	var Mod2 = Mod.extend({
		pojo: {
			subPojo: {}
		}
	});

	var mod1 = new Mod2({
		pojo: { // only pojo (not subPojo) gets cloned
			prop: 1
		}
	});

	assert(mod1.pojo !== Mod2.prototype.pojo);
	assert(mod1.pojo.subPojo === Mod2.prototype.pojo.subPojo);

	var mod2 = new Mod2({
		pojo: {
			subPojo: {
				prop: 1
			}
		}
	});
	assert(mod2.pojo !== Mod2.prototype.pojo);
	assert(mod2.pojo.subPojo !== Mod2.prototype.pojo.subPojo);


});

test("sub", function(){
	var Mod2 = Mod.extend({
		shared: new Mod(),
		willClone: new Mod()
	});

	var mod = new Mod2({
		willClone: {
			prop: 1
		}
	});

	assert(mod.shared === Mod2.prototype.shared);
	assert(mod.willClone !== Mod2.prototype.willClone);
	// assert(Object.keys(Mod2.prototype.willClone).length === 0);
	assert(mod.willClone.prop === 1);
});
test("simple logger", function(){
	var mod = new Mod({
		log: true,
		method: function(){
			console.log("method()");
		}
	});

	mod.method();

	// debugger;

	assert(mod === mod._$_$_proxy);
	console.log(mod._$_$_target);

	var mod2 = Mod();
	console.log(mod2._$_$_target)
	console.log(mod2._$_$_proxy)

	var mod22 = Object.create(mod2);
	assert(!mod2.prop);
	assert(!mod22.prop);
	mod2.prop = true;
	assert(mod22.prop);
	mod22.another = true;
	assert(!mod2.another);


	// var mod_2 = Object.create(mod);
	// assert(!mod_2.prop);
	// assert(!mod.prop);
	// mod.prop = true;
	// assert(mod_2.prop);
	// mod_2.another = true;
	// assert(!mod.another);
});

test("logger", function(){
	var base = new Mod({
		log: {
			log: true,
			method: {
				instantiate: false,
				myMethod: {
					test: true
				}
			},
			api: {
				custom: function(a, b){
					return this.s("one", "color: blue").s(a, "color: green").s(b, "color: red").s("four", "color: purple").build();
				}
			}
		},
		myMethod: function(){
			console.log("this is inside myMethod");
		}
	});

	base.myMethod();

	base.method = function(){
		this.log("rawr");
	};

	base.log("hi");
	base.method("one", true, 3);

	base.log.s("hello", "color: green").s("world", "color: blue").build()();

	var test = function(a, b){
		return base.log.f(["one", "color: blue"], [a, "color: green"], [b, "color: red"], ["four", "color: purple"]).all("background: #ddd").build();
	}

	test("two", "three")();
	base.log.custom("hello", "world")();

	var test2 = function(flog){
		return base.log.f(["first", "background: blue"], flog, ["last", "background: red"]).all("margin-right: 10px;").build();
	}

	test2(test("two", "three"))();
});

test("logger config", function(){
	// var mod = new Mod({
	// 	log: {
	// 		log: true,
			
	// 	}
	// });
});


test("proxy stuff", function(){


});



// test("assign", function(){
// 	var Sub = Mod.extend({
// 		name: "Sub",
// 		assignedTo: function(parent, name){
// 			// console.log('assignedTo', parent, name);
// 			this.name = name;
// 			this.parent = parent;
// 		}
// 	});

// 	var parent = new Mod({
// 		name: "parent",
// 		child: Sub()
// 	});

// 	assert(parent.child instanceof Sub);
// 	assert(parent.child.parent === parent);
// 	assert(parent.child.name === "child");
// });

// test("assignedTo", function(){
// 	var mod = new Mod({
// 		sub: Mod.sub()
// 	});

// 	assert(mod.sub.parent === mod);
// 	assert(mod.sub instanceof Mod);
// 	assert(mod.sub.name === "sub");
// });